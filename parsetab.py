
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.5'

_lr_method = 'LALR'

_lr_signature = '7847F2A18D7407FD40329A1F360C5EC2'
    
_lr_action_items = {'DO':([20,21,22,28,33,34,39,42,44,46,47,50,52,53,54,55,56,68,76,77,78,79,80,81,83,90,93,104,111,112,120,125,131,133,134,],[28,-34,-7,28,28,-35,-21,-26,-23,-33,-24,28,-12,-22,-36,28,-25,-38,-28,-32,-37,-31,28,-13,-27,-44,28,-30,-39,28,-40,-41,-42,28,-43,]),'MULTI':([29,31,35,37,40,45,51,58,64,70,91,92,96,100,107,108,109,121,],[-72,-59,-74,-71,-63,-70,-65,86,-70,-64,86,86,-73,-67,-61,-60,-62,-66,]),'RETURN':([20,21,22,28,33,34,39,42,44,46,47,50,52,53,54,55,56,68,76,77,78,79,80,81,83,90,93,104,111,112,120,125,131,133,134,],[30,-34,-7,30,30,-35,-21,-26,-23,-33,-24,30,-12,-22,-36,30,-25,-38,-28,-32,-37,-31,30,-13,-27,-44,30,-30,-39,30,-40,-41,-42,30,-43,]),'ASSIGNMENT':([45,102,],[73,73,]),'RIGHT_BRACKET':([20,21,22,34,39,42,44,46,47,50,52,53,54,55,56,68,76,77,78,79,80,81,83,90,104,111,125,131,134,],[34,-34,-7,-35,-21,-26,-23,-33,-24,34,-12,-22,-36,34,-25,-38,-28,-32,-37,-31,34,-13,-27,-44,-30,-39,-41,-42,-43,]),'CHAR':([20,21,22,28,30,33,34,38,39,41,42,44,46,47,50,52,53,54,55,56,66,67,68,69,72,73,74,76,77,78,79,80,81,82,83,84,85,86,87,90,93,104,110,111,112,113,114,115,116,117,118,119,120,122,123,125,131,133,134,],[35,-34,-7,35,35,35,-35,35,-21,35,-26,-23,-33,-24,35,-12,-22,-36,35,-25,35,35,-38,35,35,35,35,-28,-32,-37,-31,35,-13,35,-27,35,35,35,35,-44,35,-30,35,-39,35,-47,-51,-52,-50,-48,-49,35,-40,35,35,-41,-42,35,-43,]),'WHILE':([20,21,22,28,33,34,39,42,44,46,47,50,52,53,54,55,56,63,68,76,77,78,79,80,81,83,90,93,104,111,112,120,125,131,133,134,],[36,-34,-7,36,36,-35,-21,-26,-23,-33,-24,36,-12,-22,-36,36,-25,89,-38,-28,-32,-37,-31,36,-13,-27,-44,36,-30,-39,36,-40,-41,-42,36,-43,]),'EGAL':([29,31,32,35,37,40,51,58,64,70,91,92,95,96,100,105,106,107,108,109,121,],[-72,-59,-53,-74,-71,-63,-65,-56,-70,-64,-57,-58,113,-73,-67,-55,-54,-61,-60,-62,-66,]),'CONST_INT':([20,21,22,28,30,33,34,38,39,41,42,44,46,47,50,52,53,54,55,56,66,67,68,69,72,73,74,76,77,78,79,80,81,82,83,84,85,86,87,90,93,104,110,111,112,113,114,115,116,117,118,119,120,122,123,125,131,133,134,],[37,-34,-7,37,37,37,-35,37,-21,37,-26,-23,-33,-24,37,-12,-22,-36,37,-25,37,37,-38,37,37,37,37,-28,-32,-37,-31,37,-13,37,-27,37,37,37,37,-44,37,-30,37,-39,37,-47,-51,-52,-50,-48,-49,37,-40,37,37,-41,-42,37,-43,]),'SUP':([29,31,32,35,37,40,51,58,64,70,91,92,95,96,100,105,106,107,108,109,121,],[-72,-59,-53,-74,-71,-63,-65,-56,-70,-64,-57,-58,116,-73,-67,-55,-54,-61,-60,-62,-66,]),'EXTERN':([0,1,4,5,6,9,10,19,22,34,46,77,79,104,],[7,-1,7,-5,-3,-2,-4,-6,-7,-35,-33,-32,-31,-30,]),'DIFF':([29,31,32,35,37,40,51,58,64,70,91,92,95,96,100,105,106,107,108,109,121,],[-72,-59,-53,-74,-71,-63,-65,-56,-70,-64,-57,-58,117,-73,-67,-55,-54,-61,-60,-62,-66,]),'DIV':([29,31,35,37,40,45,51,58,64,70,91,92,96,100,107,108,109,121,],[-72,-59,-74,-71,-63,-70,-65,85,-70,-64,85,85,-73,-67,-61,-60,-62,-66,]),'MINUS':([20,21,22,28,29,30,31,32,33,34,35,37,38,39,40,41,42,44,45,46,47,50,51,52,53,54,55,56,58,64,66,67,68,69,70,72,73,74,76,77,78,79,80,81,82,83,84,85,86,87,90,91,92,93,96,100,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,125,131,133,134,],[38,-34,-7,38,-72,38,-59,67,38,-35,-74,-71,38,-21,-63,38,-26,-23,-70,-33,-24,38,-65,-12,-22,-36,38,-25,-56,-70,38,38,-38,38,-64,38,38,38,-28,-32,-37,-31,38,-13,38,-27,38,38,38,38,-44,-57,-58,38,-73,-67,-30,67,67,-61,-60,-62,38,-39,38,-47,-51,-52,-50,-48,-49,38,-40,-66,38,38,-41,-42,38,-43,]),'SEMI_COL':([12,13,14,15,16,17,20,21,22,26,28,29,31,32,33,34,35,37,39,40,42,44,45,46,47,49,50,51,52,53,54,55,56,57,58,59,60,64,65,68,70,76,77,78,79,80,81,83,90,91,92,93,95,96,98,100,103,104,105,106,107,108,109,111,112,120,121,125,126,128,129,131,133,134,],[-14,-15,-10,22,-14,-15,39,-34,-7,-16,39,-72,-59,-53,39,-35,-74,-71,-21,-63,-26,-23,-70,-33,-24,76,39,-65,-12,-22,-36,39,-25,83,-56,-11,-17,-70,90,-38,-64,-28,-32,-37,-31,39,-13,-27,-44,-57,-58,39,-46,-73,-29,-67,123,-30,-55,-54,-61,-60,-62,-39,39,-40,-66,-41,-45,130,131,-42,39,-43,]),'INFEQUAL':([29,31,32,35,37,40,51,58,64,70,91,92,95,96,100,105,106,107,108,109,121,],[-72,-59,-53,-74,-71,-63,-65,-56,-70,-64,-57,-58,114,-73,-67,-55,-54,-61,-60,-62,-66,]),'COMMA':([12,13,14,15,16,17,24,25,26,29,31,32,35,37,40,51,58,59,60,62,64,70,88,91,92,96,99,100,101,105,106,107,108,109,121,127,],[-14,-15,-10,23,-14,-15,61,-18,-16,-72,-59,-53,-74,-71,-63,-65,-56,-11,-17,-20,-70,-64,-19,-57,-58,-73,122,-67,-68,-55,-54,-61,-60,-62,-66,-69,]),'L_PARENTHESIS':([12,16,20,21,22,28,30,33,34,36,38,39,41,42,43,44,45,46,47,48,50,52,53,54,55,56,64,66,67,68,69,72,73,74,76,77,78,79,80,81,82,83,84,85,86,87,89,90,93,104,110,111,112,113,114,115,116,117,118,119,120,122,123,125,131,133,134,],[18,18,41,-34,-7,41,41,41,-35,69,41,-21,41,-26,72,-23,74,-33,-24,75,41,-12,-22,-36,41,-25,74,41,41,-38,41,41,41,41,-28,-32,-37,-31,41,-13,41,-27,41,41,41,41,110,-44,41,-30,41,-39,41,-47,-51,-52,-50,-48,-49,41,-40,41,41,-41,-42,41,-43,]),'PLUS':([29,31,32,35,37,40,45,51,58,64,70,91,92,96,100,105,106,107,108,109,121,],[-72,-59,66,-74,-71,-63,-70,-65,-56,-70,-64,-57,-58,-73,-67,66,66,-61,-60,-62,-66,]),'$end':([1,4,5,6,9,10,19,22,34,46,77,79,104,],[-1,0,-5,-3,-2,-4,-6,-7,-35,-33,-32,-31,-30,]),'IDENT':([2,3,8,11,20,21,22,23,27,28,30,33,34,38,39,41,42,44,46,47,50,52,53,54,55,56,66,67,68,69,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,90,93,104,110,111,112,113,114,115,116,117,118,119,120,122,123,125,130,131,133,134,],[-9,-8,12,16,45,-34,-7,16,62,45,64,45,-35,64,-21,64,-26,-23,-33,-24,45,-12,-22,-36,45,-25,64,64,-38,64,64,64,64,102,-28,-32,-37,-31,45,-13,64,-27,64,64,64,64,-44,45,-30,64,-39,45,-47,-51,-52,-50,-48,-49,64,-40,64,64,-41,102,-42,45,-43,]),'MODULO':([29,31,35,37,40,45,51,58,64,70,91,92,96,100,107,108,109,121,],[-72,-59,-74,-71,-63,-70,-65,87,-70,-64,87,87,-73,-67,-61,-60,-62,-66,]),'STRING':([0,1,4,5,6,7,9,10,18,19,20,21,22,34,46,52,55,61,77,79,81,104,],[2,-1,2,-5,-3,2,-2,-4,2,-6,2,-34,-7,-35,-33,-12,2,2,-32,-31,-13,-30,]),'FOR':([20,21,22,28,33,34,39,42,44,46,47,50,52,53,54,55,56,68,76,77,78,79,80,81,83,90,93,104,111,112,120,125,131,133,134,],[48,-34,-7,48,48,-35,-21,-26,-23,-33,-24,48,-12,-22,-36,48,-25,-38,-28,-32,-37,-31,48,-13,-27,-44,48,-30,-39,48,-40,-41,-42,48,-43,]),'SHIFTLEFT':([29,31,32,35,37,40,45,51,57,58,64,65,70,71,91,92,95,96,98,100,101,105,106,107,108,109,121,126,127,],[-72,-59,-53,-74,-71,-63,-70,-65,84,-56,-70,84,-64,84,-57,-58,84,-73,84,-67,84,-55,-54,-61,-60,-62,-66,84,84,]),'ELSE':([34,39,42,44,46,47,53,56,68,76,77,79,83,90,104,111,125,131,134,],[-35,-21,-26,-23,-33,-24,-22,-25,93,-28,-32,-31,-27,-44,-30,-39,-41,-42,-43,]),'SHIFTRIGHT':([29,31,32,35,37,40,45,51,57,58,64,65,70,71,91,92,95,96,98,100,101,105,106,107,108,109,121,126,127,],[-72,-59,-53,-74,-71,-63,-70,-65,82,-56,-70,82,-64,82,-57,-58,82,-73,82,-67,82,-55,-54,-61,-60,-62,-66,82,82,]),'SUPEQUAL':([29,31,32,35,37,40,51,58,64,70,91,92,95,96,100,105,106,107,108,109,121,],[-72,-59,-53,-74,-71,-63,-65,-56,-70,-64,-57,-58,115,-73,-67,-55,-54,-61,-60,-62,-66,]),'INF':([29,31,32,35,37,40,51,58,64,70,91,92,95,96,100,105,106,107,108,109,121,],[-72,-59,-53,-74,-71,-63,-65,-56,-70,-64,-57,-58,118,-73,-67,-55,-54,-61,-60,-62,-66,]),'IF':([20,21,22,28,33,34,39,42,44,46,47,50,52,53,54,55,56,68,76,77,78,79,80,81,83,90,93,104,111,112,120,125,131,133,134,],[43,-34,-7,43,43,-35,-21,-26,-23,-33,-24,43,-12,-22,-36,43,-25,-38,-28,-32,-37,-31,43,-13,-27,-44,43,-30,-39,43,-40,-41,-42,43,-43,]),'INT':([0,1,4,5,6,7,9,10,18,19,20,21,22,34,46,52,55,61,77,79,81,104,],[3,-1,3,-5,-3,3,-2,-4,3,-6,3,-34,-7,-35,-33,-12,3,3,-32,-31,-13,-30,]),'CONST_STRING':([20,21,22,28,30,33,34,38,39,41,42,44,46,47,50,52,53,54,55,56,66,67,68,69,72,73,74,76,77,78,79,80,81,82,83,84,85,86,87,90,93,104,110,111,112,113,114,115,116,117,118,119,120,122,123,125,131,133,134,],[29,-34,-7,29,29,29,-35,29,-21,29,-26,-23,-33,-24,29,-12,-22,-36,29,-25,29,29,-38,29,29,29,29,-28,-32,-37,-31,29,-13,29,-27,29,29,29,29,-44,29,-30,29,-39,29,-47,-51,-52,-50,-48,-49,29,-40,29,29,-41,-42,29,-43,]),'R_PARENTHESIS':([18,24,25,29,31,32,35,37,40,51,58,62,64,70,71,74,88,91,92,94,95,96,97,98,99,100,101,105,106,107,108,109,121,124,126,127,132,],[26,60,-18,-72,-59,-53,-74,-71,-63,-65,-56,-20,-70,-64,96,100,-19,-57,-58,112,-46,-73,120,-29,121,-67,-68,-55,-54,-61,-60,-62,-66,129,-45,-69,133,]),'LEFT_BRACKET':([13,20,21,22,26,28,33,34,39,42,44,46,47,50,52,53,54,55,56,60,68,76,77,78,79,80,81,83,90,93,104,111,112,120,125,131,133,134,],[21,21,-34,-7,-16,21,21,-35,-21,-26,-23,-33,-24,21,-12,-22,-36,21,-25,-17,-38,-28,-32,-37,-31,21,-13,-27,-44,21,-30,-39,21,-40,-41,-42,21,-43,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'unary_expression':([20,28,30,33,38,41,50,55,66,67,69,72,73,74,80,82,84,85,86,87,93,110,112,119,122,123,133,],[31,31,31,31,70,31,31,31,31,31,31,31,31,31,31,31,31,107,108,109,31,31,31,31,31,31,31,]),'expression_additive':([20,28,30,33,41,50,55,69,72,73,74,80,82,84,93,110,112,119,122,123,133,],[32,32,32,32,32,32,32,32,32,32,32,32,105,106,32,32,32,32,32,32,32,]),'cond_instruction':([20,28,33,50,55,80,93,112,133,],[33,33,33,33,33,33,33,33,33,]),'external_declaration':([0,4,],[1,9,]),'postfix_expression':([20,28,30,33,38,41,50,55,66,67,69,72,73,74,80,82,84,85,86,87,93,110,112,119,122,123,133,],[40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,]),'program':([0,],[4,]),'parameter_declaration':([18,61,],[25,88,]),'jump_instruction':([20,28,33,50,55,80,93,112,133,],[42,42,42,42,42,42,42,42,42,]),'type':([0,4,7,18,20,55,61,],[8,8,11,27,11,11,27,]),'expression_instruction':([20,28,33,50,55,80,93,112,133,],[44,44,44,44,44,44,44,44,44,]),'block_end':([20,50,55,80,],[46,77,79,104,]),'iteration_instruction':([20,28,33,50,55,80,93,112,133,],[47,47,47,47,47,47,47,47,47,]),'assignment':([20,28,33,50,55,75,80,93,112,130,133,],[49,49,49,49,49,103,49,49,49,132,49,]),'declarator':([8,11,23,],[14,14,59,]),'argument_expression_list':([74,],[99,]),'instruction_list':([20,55,],[50,80,]),'primary_expression':([20,28,30,33,38,41,50,55,66,67,69,72,73,74,80,82,84,85,86,87,93,110,112,119,122,123,133,],[51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,]),'declaration':([0,4,7,20,55,],[6,6,10,52,81,]),'condition':([69,72,110,123,],[94,97,124,128,]),'declarator_list':([8,11,],[15,15,]),'parameter_list':([18,],[24,]),'function_declarator':([8,11,23,],[13,17,17,]),'compound_instruction':([13,20,28,33,50,55,80,93,112,133,],[19,53,53,53,53,53,53,53,53,53,]),'instruction':([20,28,33,50,55,80,93,112,133,],[54,63,68,78,54,78,111,125,134,]),'block_start':([13,20,28,33,50,55,80,93,112,133,],[20,20,20,20,20,20,20,20,20,20,]),'declaration_list':([20,],[55,]),'function-definition':([0,4,],[5,5,]),'select_instruction':([20,28,33,50,55,80,93,112,133,],[56,56,56,56,56,56,56,56,56,]),'expression':([20,28,30,33,41,50,55,69,72,73,74,80,93,110,112,119,122,123,133,],[57,57,65,57,71,57,57,95,95,98,101,57,57,95,57,126,127,95,57,]),'comparison_operator':([95,],[119,]),'expression_multiplicative':([20,28,30,33,41,50,55,66,67,69,72,73,74,80,82,84,93,110,112,119,122,123,133,],[58,58,58,58,58,58,58,91,92,58,58,58,58,58,58,58,58,58,58,58,58,58,58,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> external_declaration','program',1,'p_program_1',u'parser_cstr.py',26),
  ('program -> program external_declaration','program',2,'p_program_2',u'parser_cstr.py',31),
  ('external_declaration -> declaration','external_declaration',1,'p_external_declaration_1',u'parser_cstr.py',38),
  ('external_declaration -> EXTERN declaration','external_declaration',2,'p_external_declaration_2',u'parser_cstr.py',42),
  ('external_declaration -> function-definition','external_declaration',1,'p_external_declaration_3',u'parser_cstr.py',48),
  ('function-definition -> type function_declarator compound_instruction','function-definition',3,'p_function',u'parser_cstr.py',54),
  ('declaration -> type declarator_list SEMI_COL','declaration',3,'p_declaration',u'parser_cstr.py',62),
  ('type -> INT','type',1,'p_type',u'parser_cstr.py',73),
  ('type -> STRING','type',1,'p_type',u'parser_cstr.py',74),
  ('declarator_list -> declarator','declarator_list',1,'p_declarator_list_1',u'parser_cstr.py',80),
  ('declarator_list -> declarator_list COMMA declarator','declarator_list',3,'p_declarator_list_2',u'parser_cstr.py',84),
  ('declaration_list -> declaration','declaration_list',1,'p_declaration_list_1',u'parser_cstr.py',90),
  ('declaration_list -> declaration_list declaration','declaration_list',2,'p_declaration_list_2',u'parser_cstr.py',94),
  ('declarator -> IDENT','declarator',1,'p_declarator',u'parser_cstr.py',100),
  ('declarator -> function_declarator','declarator',1,'p_declarator',u'parser_cstr.py',101),
  ('function_declarator -> IDENT L_PARENTHESIS R_PARENTHESIS','function_declarator',3,'p_function_declarator_1',u'parser_cstr.py',107),
  ('function_declarator -> IDENT L_PARENTHESIS parameter_list R_PARENTHESIS','function_declarator',4,'p_function_declarator_2',u'parser_cstr.py',111),
  ('parameter_list -> parameter_declaration','parameter_list',1,'p_parameter_list_1',u'parser_cstr.py',119),
  ('parameter_list -> parameter_list COMMA parameter_declaration','parameter_list',3,'p_parameter_list_2',u'parser_cstr.py',123),
  ('parameter_declaration -> type IDENT','parameter_declaration',2,'p_parameter_declaration',u'parser_cstr.py',129),
  ('instruction -> SEMI_COL','instruction',1,'p_instruction_1',u'parser_cstr.py',134),
  ('instruction -> compound_instruction','instruction',1,'p_instruction_2',u'parser_cstr.py',139),
  ('instruction -> expression_instruction','instruction',1,'p_instruction_2',u'parser_cstr.py',140),
  ('instruction -> iteration_instruction','instruction',1,'p_instruction_2',u'parser_cstr.py',141),
  ('instruction -> select_instruction','instruction',1,'p_instruction_2',u'parser_cstr.py',142),
  ('instruction -> jump_instruction','instruction',1,'p_instruction_2',u'parser_cstr.py',143),
  ('expression_instruction -> expression SEMI_COL','expression_instruction',2,'p_expression_instruction_1',u'parser_cstr.py',149),
  ('expression_instruction -> assignment SEMI_COL','expression_instruction',2,'p_expression_instruction_2',u'parser_cstr.py',153),
  ('assignment -> IDENT ASSIGNMENT expression','assignment',3,'p_assignment',u'parser_cstr.py',159),
  ('compound_instruction -> block_start declaration_list instruction_list block_end','compound_instruction',4,'p_compound_instruction_1',u'parser_cstr.py',178),
  ('compound_instruction -> block_start declaration_list block_end','compound_instruction',3,'p_compound_instruction_2',u'parser_cstr.py',182),
  ('compound_instruction -> block_start instruction_list block_end','compound_instruction',3,'p_compound_instruction_3',u'parser_cstr.py',186),
  ('compound_instruction -> block_start block_end','compound_instruction',2,'p_compound_instruction_4',u'parser_cstr.py',190),
  ('block_start -> LEFT_BRACKET','block_start',1,'p_block_start',u'parser_cstr.py',196),
  ('block_end -> RIGHT_BRACKET','block_end',1,'p_block_end',u'parser_cstr.py',206),
  ('instruction_list -> instruction','instruction_list',1,'p_instruction_list_1',u'parser_cstr.py',216),
  ('instruction_list -> instruction_list instruction','instruction_list',2,'p_instruction_list_2',u'parser_cstr.py',220),
  ('select_instruction -> cond_instruction instruction','select_instruction',2,'p_select_instruction_1',u'parser_cstr.py',226),
  ('select_instruction -> cond_instruction instruction ELSE instruction','select_instruction',4,'p_select_instruction_2',u'parser_cstr.py',231),
  ('cond_instruction -> IF L_PARENTHESIS condition R_PARENTHESIS','cond_instruction',4,'p_cond_instruction',u'parser_cstr.py',239),
  ('iteration_instruction -> WHILE L_PARENTHESIS condition R_PARENTHESIS instruction','iteration_instruction',5,'p_iteration_instruction_1',u'parser_cstr.py',245),
  ('iteration_instruction -> DO instruction WHILE L_PARENTHESIS condition R_PARENTHESIS SEMI_COL','iteration_instruction',7,'p_iteration_instruction_2',u'parser_cstr.py',250),
  ('iteration_instruction -> FOR L_PARENTHESIS assignment SEMI_COL condition SEMI_COL assignment R_PARENTHESIS instruction','iteration_instruction',9,'p_iteration_instruction_3',u'parser_cstr.py',255),
  ('jump_instruction -> RETURN expression SEMI_COL','jump_instruction',3,'p_jump_instruction',u'parser_cstr.py',262),
  ('condition -> expression comparison_operator expression','condition',3,'p_condition',u'parser_cstr.py',268),
  ('condition -> expression','condition',1,'p_condition2',u'parser_cstr.py',272),
  ('comparison_operator -> EGAL','comparison_operator',1,'p_comparison_operator',u'parser_cstr.py',281),
  ('comparison_operator -> DIFF','comparison_operator',1,'p_comparison_operator',u'parser_cstr.py',282),
  ('comparison_operator -> INF','comparison_operator',1,'p_comparison_operator',u'parser_cstr.py',283),
  ('comparison_operator -> SUP','comparison_operator',1,'p_comparison_operator',u'parser_cstr.py',284),
  ('comparison_operator -> INFEQUAL','comparison_operator',1,'p_comparison_operator',u'parser_cstr.py',285),
  ('comparison_operator -> SUPEQUAL','comparison_operator',1,'p_comparison_operator',u'parser_cstr.py',286),
  ('expression -> expression_additive','expression',1,'p_expression_1',u'parser_cstr.py',293),
  ('expression -> expression SHIFTLEFT expression_additive','expression',3,'p_expression_2',u'parser_cstr.py',298),
  ('expression -> expression SHIFTRIGHT expression_additive','expression',3,'p_expression_3',u'parser_cstr.py',302),
  ('expression_additive -> expression_multiplicative','expression_additive',1,'p_expression_additive_1',u'parser_cstr.py',308),
  ('expression_additive -> expression_additive PLUS expression_multiplicative','expression_additive',3,'p_expression_additive_2',u'parser_cstr.py',313),
  ('expression_additive -> expression_additive MINUS expression_multiplicative','expression_additive',3,'p_additive_expression_3',u'parser_cstr.py',318),
  ('expression_multiplicative -> unary_expression','expression_multiplicative',1,'p_expression_multiplicative_1',u'parser_cstr.py',325),
  ('expression_multiplicative -> expression_multiplicative MULTI unary_expression','expression_multiplicative',3,'p_expression_multiplicative_2',u'parser_cstr.py',330),
  ('expression_multiplicative -> expression_multiplicative DIV unary_expression','expression_multiplicative',3,'p_expression_multiplicative_3',u'parser_cstr.py',335),
  ('expression_multiplicative -> expression_multiplicative MODULO unary_expression','expression_multiplicative',3,'p_multiplicative_expression_4',u'parser_cstr.py',340),
  ('unary_expression -> postfix_expression','unary_expression',1,'p_unary_expression_1',u'parser_cstr.py',347),
  ('unary_expression -> MINUS unary_expression','unary_expression',2,'p_unary_expression_2',u'parser_cstr.py',352),
  ('postfix_expression -> primary_expression','postfix_expression',1,'p_postfix_expression_1',u'parser_cstr.py',362),
  ('postfix_expression -> IDENT L_PARENTHESIS argument_expression_list R_PARENTHESIS','postfix_expression',4,'p_postfix_expression_2',u'parser_cstr.py',367),
  ('postfix_expression -> IDENT L_PARENTHESIS R_PARENTHESIS','postfix_expression',3,'p_postfix_expression_3',u'parser_cstr.py',372),
  ('argument_expression_list -> expression','argument_expression_list',1,'p_argument_expression_list_1',u'parser_cstr.py',379),
  ('argument_expression_list -> argument_expression_list COMMA expression','argument_expression_list',3,'p_argument_expression_list_2',u'parser_cstr.py',383),
  ('primary_expression -> IDENT','primary_expression',1,'p_primary_expression_1',u'parser_cstr.py',390),
  ('primary_expression -> CONST_INT','primary_expression',1,'p_primary_expression_2',u'parser_cstr.py',394),
  ('primary_expression -> CONST_STRING','primary_expression',1,'p_primary_expression_3',u'parser_cstr.py',398),
  ('primary_expression -> L_PARENTHESIS expression R_PARENTHESIS','primary_expression',3,'p_primary_expression_4',u'parser_cstr.py',402),
  ('primary_expression -> CHAR','primary_expression',1,'p_primary_expression_5',u'parser_cstr.py',406),
]
