Created by PLY version 3.7 (http://www.dabeaz.com/ply)

Unused terminals:

    THEN
    CONST
    DIV_ASSIGN
    ADD_ASSIGN
    SUB_ASSIGN
    MOD_ASSIGN
    MUL_ASSIGN

Grammar

Rule 0     S' -> program
Rule 1     program -> external_declaration
Rule 2     program -> program external_declaration
Rule 3     external_declaration -> declaration
Rule 4     external_declaration -> EXTERN declaration
Rule 5     external_declaration -> function-definition
Rule 6     function-definition -> type function_declarator compound_instruction
Rule 7     declaration -> type declarator_list SEMI_COL
Rule 8     type -> INT
Rule 9     type -> STRING
Rule 10    declarator_list -> declarator
Rule 11    declarator_list -> declarator_list COMMA declarator
Rule 12    declaration_list -> declaration
Rule 13    declaration_list -> declaration_list declaration
Rule 14    declarator -> IDENT
Rule 15    declarator -> function_declarator
Rule 16    function_declarator -> IDENT L_PARENTHESIS R_PARENTHESIS
Rule 17    function_declarator -> IDENT L_PARENTHESIS parameter_list R_PARENTHESIS
Rule 18    parameter_list -> parameter_declaration
Rule 19    parameter_list -> parameter_list COMMA parameter_declaration
Rule 20    parameter_declaration -> type IDENT
Rule 21    instruction -> SEMI_COL
Rule 22    instruction -> compound_instruction
Rule 23    instruction -> expression_instruction
Rule 24    instruction -> iteration_instruction
Rule 25    instruction -> select_instruction
Rule 26    instruction -> jump_instruction
Rule 27    expression_instruction -> expression SEMI_COL
Rule 28    expression_instruction -> assignment SEMI_COL
Rule 29    assignment -> IDENT ASSIGNMENT expression
Rule 30    compound_instruction -> block_start declaration_list instruction_list block_end
Rule 31    compound_instruction -> block_start declaration_list block_end
Rule 32    compound_instruction -> block_start instruction_list block_end
Rule 33    compound_instruction -> block_start block_end
Rule 34    block_start -> LEFT_BRACKET
Rule 35    block_end -> RIGHT_BRACKET
Rule 36    instruction_list -> instruction
Rule 37    instruction_list -> instruction_list instruction
Rule 38    select_instruction -> cond_instruction instruction
Rule 39    select_instruction -> cond_instruction instruction ELSE instruction
Rule 40    cond_instruction -> IF L_PARENTHESIS condition R_PARENTHESIS
Rule 41    iteration_instruction -> WHILE L_PARENTHESIS condition R_PARENTHESIS instruction
Rule 42    iteration_instruction -> DO instruction WHILE L_PARENTHESIS condition R_PARENTHESIS SEMI_COL
Rule 43    iteration_instruction -> FOR L_PARENTHESIS assignment SEMI_COL condition SEMI_COL assignment R_PARENTHESIS instruction
Rule 44    jump_instruction -> RETURN expression SEMI_COL
Rule 45    condition -> expression comparison_operator expression
Rule 46    condition -> expression
Rule 47    comparison_operator -> EGAL
Rule 48    comparison_operator -> DIFF
Rule 49    comparison_operator -> INF
Rule 50    comparison_operator -> SUP
Rule 51    comparison_operator -> INFEQUAL
Rule 52    comparison_operator -> SUPEQUAL
Rule 53    expression -> expression_additive
Rule 54    expression -> expression SHIFTLEFT expression_additive
Rule 55    expression -> expression SHIFTRIGHT expression_additive
Rule 56    expression_additive -> expression_multiplicative
Rule 57    expression_additive -> expression_additive PLUS expression_multiplicative
Rule 58    expression_additive -> expression_additive MINUS expression_multiplicative
Rule 59    expression_multiplicative -> unary_expression
Rule 60    expression_multiplicative -> expression_multiplicative MULTI unary_expression
Rule 61    expression_multiplicative -> expression_multiplicative DIV unary_expression
Rule 62    expression_multiplicative -> expression_multiplicative MODULO unary_expression
Rule 63    unary_expression -> postfix_expression
Rule 64    unary_expression -> MINUS unary_expression
Rule 65    postfix_expression -> primary_expression
Rule 66    postfix_expression -> IDENT L_PARENTHESIS argument_expression_list R_PARENTHESIS
Rule 67    postfix_expression -> IDENT L_PARENTHESIS R_PARENTHESIS
Rule 68    argument_expression_list -> expression
Rule 69    argument_expression_list -> argument_expression_list COMMA expression
Rule 70    primary_expression -> IDENT
Rule 71    primary_expression -> CONST_INT
Rule 72    primary_expression -> CONST_STRING
Rule 73    primary_expression -> L_PARENTHESIS expression R_PARENTHESIS
Rule 74    primary_expression -> CHAR

Terminals, with rules where they appear

ADD_ASSIGN           : 
ASSIGNMENT           : 29
CHAR                 : 74
COMMA                : 11 19 69
CONST                : 
CONST_INT            : 71
CONST_STRING         : 72
DIFF                 : 48
DIV                  : 61
DIV_ASSIGN           : 
DO                   : 42
EGAL                 : 47
ELSE                 : 39
EXTERN               : 4
FOR                  : 43
IDENT                : 14 16 17 20 29 66 67 70
IF                   : 40
INF                  : 49
INFEQUAL             : 51
INT                  : 8
LEFT_BRACKET         : 34
L_PARENTHESIS        : 16 17 40 41 42 43 66 67 73
MINUS                : 58 64
MODULO               : 62
MOD_ASSIGN           : 
MULTI                : 60
MUL_ASSIGN           : 
PLUS                 : 57
RETURN               : 44
RIGHT_BRACKET        : 35
R_PARENTHESIS        : 16 17 40 41 42 43 66 67 73
SEMI_COL             : 7 21 27 28 42 43 43 44
SHIFTLEFT            : 54
SHIFTRIGHT           : 55
STRING               : 9
SUB_ASSIGN           : 
SUP                  : 50
SUPEQUAL             : 52
THEN                 : 
WHILE                : 41 42
error                : 

Nonterminals, with rules where they appear

argument_expression_list : 66 69
assignment           : 28 43 43
block_end            : 30 31 32 33
block_start          : 30 31 32 33
comparison_operator  : 45
compound_instruction : 6 22
cond_instruction     : 38 39
condition            : 40 41 42 43
declaration          : 3 4 12 13
declaration_list     : 13 30 31
declarator           : 10 11
declarator_list      : 7 11
expression           : 27 29 44 45 45 46 54 55 68 69 73
expression_additive  : 53 54 55 57 58
expression_instruction : 23
expression_multiplicative : 56 57 58 60 61 62
external_declaration : 1 2
function-definition  : 5
function_declarator  : 6 15
instruction          : 36 37 38 39 39 41 42 43
instruction_list     : 30 32 37
iteration_instruction : 24
jump_instruction     : 26
parameter_declaration : 18 19
parameter_list       : 17 19
postfix_expression   : 63
primary_expression   : 65
program              : 2 0
select_instruction   : 25
type                 : 6 7 20
unary_expression     : 59 60 61 62 64

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . external_declaration
    (2) program -> . program external_declaration
    (3) external_declaration -> . declaration
    (4) external_declaration -> . EXTERN declaration
    (5) external_declaration -> . function-definition
    (7) declaration -> . type declarator_list SEMI_COL
    (6) function-definition -> . type function_declarator compound_instruction
    (8) type -> . INT
    (9) type -> . STRING

    EXTERN          shift and go to state 7
    INT             shift and go to state 3
    STRING          shift and go to state 2

    external_declaration           shift and go to state 1
    program                        shift and go to state 4
    function-definition            shift and go to state 5
    declaration                    shift and go to state 6
    type                           shift and go to state 8

state 1

    (1) program -> external_declaration .

    EXTERN          reduce using rule 1 (program -> external_declaration .)
    INT             reduce using rule 1 (program -> external_declaration .)
    STRING          reduce using rule 1 (program -> external_declaration .)
    $end            reduce using rule 1 (program -> external_declaration .)


state 2

    (9) type -> STRING .

    IDENT           reduce using rule 9 (type -> STRING .)


state 3

    (8) type -> INT .

    IDENT           reduce using rule 8 (type -> INT .)


state 4

    (0) S' -> program .
    (2) program -> program . external_declaration
    (3) external_declaration -> . declaration
    (4) external_declaration -> . EXTERN declaration
    (5) external_declaration -> . function-definition
    (7) declaration -> . type declarator_list SEMI_COL
    (6) function-definition -> . type function_declarator compound_instruction
    (8) type -> . INT
    (9) type -> . STRING

    EXTERN          shift and go to state 7
    INT             shift and go to state 3
    STRING          shift and go to state 2

    external_declaration           shift and go to state 9
    function-definition            shift and go to state 5
    declaration                    shift and go to state 6
    type                           shift and go to state 8

state 5

    (5) external_declaration -> function-definition .

    EXTERN          reduce using rule 5 (external_declaration -> function-definition .)
    INT             reduce using rule 5 (external_declaration -> function-definition .)
    STRING          reduce using rule 5 (external_declaration -> function-definition .)
    $end            reduce using rule 5 (external_declaration -> function-definition .)


state 6

    (3) external_declaration -> declaration .

    EXTERN          reduce using rule 3 (external_declaration -> declaration .)
    INT             reduce using rule 3 (external_declaration -> declaration .)
    STRING          reduce using rule 3 (external_declaration -> declaration .)
    $end            reduce using rule 3 (external_declaration -> declaration .)


state 7

    (4) external_declaration -> EXTERN . declaration
    (7) declaration -> . type declarator_list SEMI_COL
    (8) type -> . INT
    (9) type -> . STRING

    INT             shift and go to state 3
    STRING          shift and go to state 2

    type                           shift and go to state 11
    declaration                    shift and go to state 10

state 8

    (7) declaration -> type . declarator_list SEMI_COL
    (6) function-definition -> type . function_declarator compound_instruction
    (10) declarator_list -> . declarator
    (11) declarator_list -> . declarator_list COMMA declarator
    (16) function_declarator -> . IDENT L_PARENTHESIS R_PARENTHESIS
    (17) function_declarator -> . IDENT L_PARENTHESIS parameter_list R_PARENTHESIS
    (14) declarator -> . IDENT
    (15) declarator -> . function_declarator

    IDENT           shift and go to state 12

    function_declarator            shift and go to state 13
    declarator                     shift and go to state 14
    declarator_list                shift and go to state 15

state 9

    (2) program -> program external_declaration .

    EXTERN          reduce using rule 2 (program -> program external_declaration .)
    INT             reduce using rule 2 (program -> program external_declaration .)
    STRING          reduce using rule 2 (program -> program external_declaration .)
    $end            reduce using rule 2 (program -> program external_declaration .)


state 10

    (4) external_declaration -> EXTERN declaration .

    EXTERN          reduce using rule 4 (external_declaration -> EXTERN declaration .)
    INT             reduce using rule 4 (external_declaration -> EXTERN declaration .)
    STRING          reduce using rule 4 (external_declaration -> EXTERN declaration .)
    $end            reduce using rule 4 (external_declaration -> EXTERN declaration .)


state 11

    (7) declaration -> type . declarator_list SEMI_COL
    (10) declarator_list -> . declarator
    (11) declarator_list -> . declarator_list COMMA declarator
    (14) declarator -> . IDENT
    (15) declarator -> . function_declarator
    (16) function_declarator -> . IDENT L_PARENTHESIS R_PARENTHESIS
    (17) function_declarator -> . IDENT L_PARENTHESIS parameter_list R_PARENTHESIS

    IDENT           shift and go to state 16

    function_declarator            shift and go to state 17
    declarator                     shift and go to state 14
    declarator_list                shift and go to state 15

state 12

    (16) function_declarator -> IDENT . L_PARENTHESIS R_PARENTHESIS
    (17) function_declarator -> IDENT . L_PARENTHESIS parameter_list R_PARENTHESIS
    (14) declarator -> IDENT .

    L_PARENTHESIS   shift and go to state 18
    SEMI_COL        reduce using rule 14 (declarator -> IDENT .)
    COMMA           reduce using rule 14 (declarator -> IDENT .)


state 13

    (6) function-definition -> type function_declarator . compound_instruction
    (15) declarator -> function_declarator .
    (30) compound_instruction -> . block_start declaration_list instruction_list block_end
    (31) compound_instruction -> . block_start declaration_list block_end
    (32) compound_instruction -> . block_start instruction_list block_end
    (33) compound_instruction -> . block_start block_end
    (34) block_start -> . LEFT_BRACKET

    SEMI_COL        reduce using rule 15 (declarator -> function_declarator .)
    COMMA           reduce using rule 15 (declarator -> function_declarator .)
    LEFT_BRACKET    shift and go to state 21

    compound_instruction           shift and go to state 19
    block_start                    shift and go to state 20

state 14

    (10) declarator_list -> declarator .

    SEMI_COL        reduce using rule 10 (declarator_list -> declarator .)
    COMMA           reduce using rule 10 (declarator_list -> declarator .)


state 15

    (7) declaration -> type declarator_list . SEMI_COL
    (11) declarator_list -> declarator_list . COMMA declarator

    SEMI_COL        shift and go to state 22
    COMMA           shift and go to state 23


state 16

    (14) declarator -> IDENT .
    (16) function_declarator -> IDENT . L_PARENTHESIS R_PARENTHESIS
    (17) function_declarator -> IDENT . L_PARENTHESIS parameter_list R_PARENTHESIS

    SEMI_COL        reduce using rule 14 (declarator -> IDENT .)
    COMMA           reduce using rule 14 (declarator -> IDENT .)
    L_PARENTHESIS   shift and go to state 18


state 17

    (15) declarator -> function_declarator .

    SEMI_COL        reduce using rule 15 (declarator -> function_declarator .)
    COMMA           reduce using rule 15 (declarator -> function_declarator .)


state 18

    (16) function_declarator -> IDENT L_PARENTHESIS . R_PARENTHESIS
    (17) function_declarator -> IDENT L_PARENTHESIS . parameter_list R_PARENTHESIS
    (18) parameter_list -> . parameter_declaration
    (19) parameter_list -> . parameter_list COMMA parameter_declaration
    (20) parameter_declaration -> . type IDENT
    (8) type -> . INT
    (9) type -> . STRING

    R_PARENTHESIS   shift and go to state 26
    INT             shift and go to state 3
    STRING          shift and go to state 2

    parameter_declaration          shift and go to state 25
    type                           shift and go to state 27
    parameter_list                 shift and go to state 24

state 19

    (6) function-definition -> type function_declarator compound_instruction .

    EXTERN          reduce using rule 6 (function-definition -> type function_declarator compound_instruction .)
    INT             reduce using rule 6 (function-definition -> type function_declarator compound_instruction .)
    STRING          reduce using rule 6 (function-definition -> type function_declarator compound_instruction .)
    $end            reduce using rule 6 (function-definition -> type function_declarator compound_instruction .)


state 20

    (30) compound_instruction -> block_start . declaration_list instruction_list block_end
    (31) compound_instruction -> block_start . declaration_list block_end
    (32) compound_instruction -> block_start . instruction_list block_end
    (33) compound_instruction -> block_start . block_end
    (12) declaration_list -> . declaration
    (13) declaration_list -> . declaration_list declaration
    (36) instruction_list -> . instruction
    (37) instruction_list -> . instruction_list instruction
    (35) block_end -> . RIGHT_BRACKET
    (7) declaration -> . type declarator_list SEMI_COL
    (21) instruction -> . SEMI_COL
    (22) instruction -> . compound_instruction
    (23) instruction -> . expression_instruction
    (24) instruction -> . iteration_instruction
    (25) instruction -> . select_instruction
    (26) instruction -> . jump_instruction
    (8) type -> . INT
    (9) type -> . STRING
    (30) compound_instruction -> . block_start declaration_list instruction_list block_end
    (31) compound_instruction -> . block_start declaration_list block_end
    (32) compound_instruction -> . block_start instruction_list block_end
    (33) compound_instruction -> . block_start block_end
    (27) expression_instruction -> . expression SEMI_COL
    (28) expression_instruction -> . assignment SEMI_COL
    (41) iteration_instruction -> . WHILE L_PARENTHESIS condition R_PARENTHESIS instruction
    (42) iteration_instruction -> . DO instruction WHILE L_PARENTHESIS condition R_PARENTHESIS SEMI_COL
    (43) iteration_instruction -> . FOR L_PARENTHESIS assignment SEMI_COL condition SEMI_COL assignment R_PARENTHESIS instruction
    (38) select_instruction -> . cond_instruction instruction
    (39) select_instruction -> . cond_instruction instruction ELSE instruction
    (44) jump_instruction -> . RETURN expression SEMI_COL
    (34) block_start -> . LEFT_BRACKET
    (53) expression -> . expression_additive
    (54) expression -> . expression SHIFTLEFT expression_additive
    (55) expression -> . expression SHIFTRIGHT expression_additive
    (29) assignment -> . IDENT ASSIGNMENT expression
    (40) cond_instruction -> . IF L_PARENTHESIS condition R_PARENTHESIS
    (56) expression_additive -> . expression_multiplicative
    (57) expression_additive -> . expression_additive PLUS expression_multiplicative
    (58) expression_additive -> . expression_additive MINUS expression_multiplicative
    (59) expression_multiplicative -> . unary_expression
    (60) expression_multiplicative -> . expression_multiplicative MULTI unary_expression
    (61) expression_multiplicative -> . expression_multiplicative DIV unary_expression
    (62) expression_multiplicative -> . expression_multiplicative MODULO unary_expression
    (63) unary_expression -> . postfix_expression
    (64) unary_expression -> . MINUS unary_expression
    (65) postfix_expression -> . primary_expression
    (66) postfix_expression -> . IDENT L_PARENTHESIS argument_expression_list R_PARENTHESIS
    (67) postfix_expression -> . IDENT L_PARENTHESIS R_PARENTHESIS
    (70) primary_expression -> . IDENT
    (71) primary_expression -> . CONST_INT
    (72) primary_expression -> . CONST_STRING
    (73) primary_expression -> . L_PARENTHESIS expression R_PARENTHESIS
    (74) primary_expression -> . CHAR

    RIGHT_BRACKET   shift and go to state 34
    SEMI_COL        shift and go to state 39
    INT             shift and go to state 3
    STRING          shift and go to state 2
    WHILE           shift and go to state 36
    DO              shift and go to state 28
    FOR             shift and go to state 48
    RETURN          shift and go to state 30
    LEFT_BRACKET    shift and go to state 21
    IDENT           shift and go to state 45
    IF              shift and go to state 43
    MINUS           shift and go to state 38
    CONST_INT       shift and go to state 37
    CONST_STRING    shift and go to state 29
    L_PARENTHESIS   shift and go to state 41
    CHAR            shift and go to state 35

    unary_expression               shift and go to state 31
    expression_additive            shift and go to state 32
    cond_instruction               shift and go to state 33
    postfix_expression             shift and go to state 40
    jump_instruction               shift and go to state 42
    type                           shift and go to state 11
    expression_instruction         shift and go to state 44
    block_end                      shift and go to state 46
    iteration_instruction          shift and go to state 47
    assignment                     shift and go to state 49
    instruction_list               shift and go to state 50
    primary_expression             shift and go to state 51
    declaration                    shift and go to state 52
    compound_instruction           shift and go to state 53
    instruction                    shift and go to state 54
    block_start                    shift and go to state 20
    declaration_list               shift and go to state 55
    select_instruction             shift and go to state 56
    expression                     shift and go to state 57
    expression_multiplicative      shift and go to state 58

state 21

    (34) block_start -> LEFT_BRACKET .

    RIGHT_BRACKET   reduce using rule 34 (block_start -> LEFT_BRACKET .)
    SEMI_COL        reduce using rule 34 (block_start -> LEFT_BRACKET .)
    INT             reduce using rule 34 (block_start -> LEFT_BRACKET .)
    STRING          reduce using rule 34 (block_start -> LEFT_BRACKET .)
    WHILE           reduce using rule 34 (block_start -> LEFT_BRACKET .)
    DO              reduce using rule 34 (block_start -> LEFT_BRACKET .)
    FOR             reduce using rule 34 (block_start -> LEFT_BRACKET .)
    RETURN          reduce using rule 34 (block_start -> LEFT_BRACKET .)
    LEFT_BRACKET    reduce using rule 34 (block_start -> LEFT_BRACKET .)
    IDENT           reduce using rule 34 (block_start -> LEFT_BRACKET .)
    IF              reduce using rule 34 (block_start -> LEFT_BRACKET .)
    MINUS           reduce using rule 34 (block_start -> LEFT_BRACKET .)
    CONST_INT       reduce using rule 34 (block_start -> LEFT_BRACKET .)
    CONST_STRING    reduce using rule 34 (block_start -> LEFT_BRACKET .)
    L_PARENTHESIS   reduce using rule 34 (block_start -> LEFT_BRACKET .)
    CHAR            reduce using rule 34 (block_start -> LEFT_BRACKET .)


state 22

    (7) declaration -> type declarator_list SEMI_COL .

    RIGHT_BRACKET   reduce using rule 7 (declaration -> type declarator_list SEMI_COL .)
    SEMI_COL        reduce using rule 7 (declaration -> type declarator_list SEMI_COL .)
    INT             reduce using rule 7 (declaration -> type declarator_list SEMI_COL .)
    STRING          reduce using rule 7 (declaration -> type declarator_list SEMI_COL .)
    WHILE           reduce using rule 7 (declaration -> type declarator_list SEMI_COL .)
    DO              reduce using rule 7 (declaration -> type declarator_list SEMI_COL .)
    FOR             reduce using rule 7 (declaration -> type declarator_list SEMI_COL .)
    RETURN          reduce using rule 7 (declaration -> type declarator_list SEMI_COL .)
    LEFT_BRACKET    reduce using rule 7 (declaration -> type declarator_list SEMI_COL .)
    IDENT           reduce using rule 7 (declaration -> type declarator_list SEMI_COL .)
    IF              reduce using rule 7 (declaration -> type declarator_list SEMI_COL .)
    MINUS           reduce using rule 7 (declaration -> type declarator_list SEMI_COL .)
    CONST_INT       reduce using rule 7 (declaration -> type declarator_list SEMI_COL .)
    CONST_STRING    reduce using rule 7 (declaration -> type declarator_list SEMI_COL .)
    L_PARENTHESIS   reduce using rule 7 (declaration -> type declarator_list SEMI_COL .)
    CHAR            reduce using rule 7 (declaration -> type declarator_list SEMI_COL .)
    EXTERN          reduce using rule 7 (declaration -> type declarator_list SEMI_COL .)
    $end            reduce using rule 7 (declaration -> type declarator_list SEMI_COL .)


state 23

    (11) declarator_list -> declarator_list COMMA . declarator
    (14) declarator -> . IDENT
    (15) declarator -> . function_declarator
    (16) function_declarator -> . IDENT L_PARENTHESIS R_PARENTHESIS
    (17) function_declarator -> . IDENT L_PARENTHESIS parameter_list R_PARENTHESIS

    IDENT           shift and go to state 16

    function_declarator            shift and go to state 17
    declarator                     shift and go to state 59

state 24

    (17) function_declarator -> IDENT L_PARENTHESIS parameter_list . R_PARENTHESIS
    (19) parameter_list -> parameter_list . COMMA parameter_declaration

    R_PARENTHESIS   shift and go to state 60
    COMMA           shift and go to state 61


state 25

    (18) parameter_list -> parameter_declaration .

    R_PARENTHESIS   reduce using rule 18 (parameter_list -> parameter_declaration .)
    COMMA           reduce using rule 18 (parameter_list -> parameter_declaration .)


state 26

    (16) function_declarator -> IDENT L_PARENTHESIS R_PARENTHESIS .

    SEMI_COL        reduce using rule 16 (function_declarator -> IDENT L_PARENTHESIS R_PARENTHESIS .)
    COMMA           reduce using rule 16 (function_declarator -> IDENT L_PARENTHESIS R_PARENTHESIS .)
    LEFT_BRACKET    reduce using rule 16 (function_declarator -> IDENT L_PARENTHESIS R_PARENTHESIS .)


state 27

    (20) parameter_declaration -> type . IDENT

    IDENT           shift and go to state 62


state 28

    (42) iteration_instruction -> DO . instruction WHILE L_PARENTHESIS condition R_PARENTHESIS SEMI_COL
    (21) instruction -> . SEMI_COL
    (22) instruction -> . compound_instruction
    (23) instruction -> . expression_instruction
    (24) instruction -> . iteration_instruction
    (25) instruction -> . select_instruction
    (26) instruction -> . jump_instruction
    (30) compound_instruction -> . block_start declaration_list instruction_list block_end
    (31) compound_instruction -> . block_start declaration_list block_end
    (32) compound_instruction -> . block_start instruction_list block_end
    (33) compound_instruction -> . block_start block_end
    (27) expression_instruction -> . expression SEMI_COL
    (28) expression_instruction -> . assignment SEMI_COL
    (41) iteration_instruction -> . WHILE L_PARENTHESIS condition R_PARENTHESIS instruction
    (42) iteration_instruction -> . DO instruction WHILE L_PARENTHESIS condition R_PARENTHESIS SEMI_COL
    (43) iteration_instruction -> . FOR L_PARENTHESIS assignment SEMI_COL condition SEMI_COL assignment R_PARENTHESIS instruction
    (38) select_instruction -> . cond_instruction instruction
    (39) select_instruction -> . cond_instruction instruction ELSE instruction
    (44) jump_instruction -> . RETURN expression SEMI_COL
    (34) block_start -> . LEFT_BRACKET
    (53) expression -> . expression_additive
    (54) expression -> . expression SHIFTLEFT expression_additive
    (55) expression -> . expression SHIFTRIGHT expression_additive
    (29) assignment -> . IDENT ASSIGNMENT expression
    (40) cond_instruction -> . IF L_PARENTHESIS condition R_PARENTHESIS
    (56) expression_additive -> . expression_multiplicative
    (57) expression_additive -> . expression_additive PLUS expression_multiplicative
    (58) expression_additive -> . expression_additive MINUS expression_multiplicative
    (59) expression_multiplicative -> . unary_expression
    (60) expression_multiplicative -> . expression_multiplicative MULTI unary_expression
    (61) expression_multiplicative -> . expression_multiplicative DIV unary_expression
    (62) expression_multiplicative -> . expression_multiplicative MODULO unary_expression
    (63) unary_expression -> . postfix_expression
    (64) unary_expression -> . MINUS unary_expression
    (65) postfix_expression -> . primary_expression
    (66) postfix_expression -> . IDENT L_PARENTHESIS argument_expression_list R_PARENTHESIS
    (67) postfix_expression -> . IDENT L_PARENTHESIS R_PARENTHESIS
    (70) primary_expression -> . IDENT
    (71) primary_expression -> . CONST_INT
    (72) primary_expression -> . CONST_STRING
    (73) primary_expression -> . L_PARENTHESIS expression R_PARENTHESIS
    (74) primary_expression -> . CHAR

    SEMI_COL        shift and go to state 39
    WHILE           shift and go to state 36
    DO              shift and go to state 28
    FOR             shift and go to state 48
    RETURN          shift and go to state 30
    LEFT_BRACKET    shift and go to state 21
    IDENT           shift and go to state 45
    IF              shift and go to state 43
    MINUS           shift and go to state 38
    CONST_INT       shift and go to state 37
    CONST_STRING    shift and go to state 29
    L_PARENTHESIS   shift and go to state 41
    CHAR            shift and go to state 35

    expression_instruction         shift and go to state 44
    iteration_instruction          shift and go to state 47
    unary_expression               shift and go to state 31
    assignment                     shift and go to state 49
    compound_instruction           shift and go to state 53
    instruction                    shift and go to state 63
    block_start                    shift and go to state 20
    postfix_expression             shift and go to state 40
    cond_instruction               shift and go to state 33
    expression_multiplicative      shift and go to state 58
    select_instruction             shift and go to state 56
    jump_instruction               shift and go to state 42
    expression                     shift and go to state 57
    expression_additive            shift and go to state 32
    primary_expression             shift and go to state 51

state 29

    (72) primary_expression -> CONST_STRING .

    MULTI           reduce using rule 72 (primary_expression -> CONST_STRING .)
    DIV             reduce using rule 72 (primary_expression -> CONST_STRING .)
    MODULO          reduce using rule 72 (primary_expression -> CONST_STRING .)
    PLUS            reduce using rule 72 (primary_expression -> CONST_STRING .)
    MINUS           reduce using rule 72 (primary_expression -> CONST_STRING .)
    SHIFTLEFT       reduce using rule 72 (primary_expression -> CONST_STRING .)
    SHIFTRIGHT      reduce using rule 72 (primary_expression -> CONST_STRING .)
    R_PARENTHESIS   reduce using rule 72 (primary_expression -> CONST_STRING .)
    COMMA           reduce using rule 72 (primary_expression -> CONST_STRING .)
    SEMI_COL        reduce using rule 72 (primary_expression -> CONST_STRING .)
    EGAL            reduce using rule 72 (primary_expression -> CONST_STRING .)
    DIFF            reduce using rule 72 (primary_expression -> CONST_STRING .)
    INF             reduce using rule 72 (primary_expression -> CONST_STRING .)
    SUP             reduce using rule 72 (primary_expression -> CONST_STRING .)
    INFEQUAL        reduce using rule 72 (primary_expression -> CONST_STRING .)
    SUPEQUAL        reduce using rule 72 (primary_expression -> CONST_STRING .)


state 30

    (44) jump_instruction -> RETURN . expression SEMI_COL
    (53) expression -> . expression_additive
    (54) expression -> . expression SHIFTLEFT expression_additive
    (55) expression -> . expression SHIFTRIGHT expression_additive
    (56) expression_additive -> . expression_multiplicative
    (57) expression_additive -> . expression_additive PLUS expression_multiplicative
    (58) expression_additive -> . expression_additive MINUS expression_multiplicative
    (59) expression_multiplicative -> . unary_expression
    (60) expression_multiplicative -> . expression_multiplicative MULTI unary_expression
    (61) expression_multiplicative -> . expression_multiplicative DIV unary_expression
    (62) expression_multiplicative -> . expression_multiplicative MODULO unary_expression
    (63) unary_expression -> . postfix_expression
    (64) unary_expression -> . MINUS unary_expression
    (65) postfix_expression -> . primary_expression
    (66) postfix_expression -> . IDENT L_PARENTHESIS argument_expression_list R_PARENTHESIS
    (67) postfix_expression -> . IDENT L_PARENTHESIS R_PARENTHESIS
    (70) primary_expression -> . IDENT
    (71) primary_expression -> . CONST_INT
    (72) primary_expression -> . CONST_STRING
    (73) primary_expression -> . L_PARENTHESIS expression R_PARENTHESIS
    (74) primary_expression -> . CHAR

    MINUS           shift and go to state 38
    IDENT           shift and go to state 64
    CONST_INT       shift and go to state 37
    CONST_STRING    shift and go to state 29
    L_PARENTHESIS   shift and go to state 41
    CHAR            shift and go to state 35

    unary_expression               shift and go to state 31
    expression_additive            shift and go to state 32
    postfix_expression             shift and go to state 40
    primary_expression             shift and go to state 51
    expression                     shift and go to state 65
    expression_multiplicative      shift and go to state 58

state 31

    (59) expression_multiplicative -> unary_expression .

    MULTI           reduce using rule 59 (expression_multiplicative -> unary_expression .)
    DIV             reduce using rule 59 (expression_multiplicative -> unary_expression .)
    MODULO          reduce using rule 59 (expression_multiplicative -> unary_expression .)
    PLUS            reduce using rule 59 (expression_multiplicative -> unary_expression .)
    MINUS           reduce using rule 59 (expression_multiplicative -> unary_expression .)
    SEMI_COL        reduce using rule 59 (expression_multiplicative -> unary_expression .)
    SHIFTLEFT       reduce using rule 59 (expression_multiplicative -> unary_expression .)
    SHIFTRIGHT      reduce using rule 59 (expression_multiplicative -> unary_expression .)
    R_PARENTHESIS   reduce using rule 59 (expression_multiplicative -> unary_expression .)
    COMMA           reduce using rule 59 (expression_multiplicative -> unary_expression .)
    EGAL            reduce using rule 59 (expression_multiplicative -> unary_expression .)
    DIFF            reduce using rule 59 (expression_multiplicative -> unary_expression .)
    INF             reduce using rule 59 (expression_multiplicative -> unary_expression .)
    SUP             reduce using rule 59 (expression_multiplicative -> unary_expression .)
    INFEQUAL        reduce using rule 59 (expression_multiplicative -> unary_expression .)
    SUPEQUAL        reduce using rule 59 (expression_multiplicative -> unary_expression .)


state 32

    (53) expression -> expression_additive .
    (57) expression_additive -> expression_additive . PLUS expression_multiplicative
    (58) expression_additive -> expression_additive . MINUS expression_multiplicative

    SHIFTLEFT       reduce using rule 53 (expression -> expression_additive .)
    SHIFTRIGHT      reduce using rule 53 (expression -> expression_additive .)
    EGAL            reduce using rule 53 (expression -> expression_additive .)
    DIFF            reduce using rule 53 (expression -> expression_additive .)
    INF             reduce using rule 53 (expression -> expression_additive .)
    SUP             reduce using rule 53 (expression -> expression_additive .)
    INFEQUAL        reduce using rule 53 (expression -> expression_additive .)
    SUPEQUAL        reduce using rule 53 (expression -> expression_additive .)
    R_PARENTHESIS   reduce using rule 53 (expression -> expression_additive .)
    SEMI_COL        reduce using rule 53 (expression -> expression_additive .)
    COMMA           reduce using rule 53 (expression -> expression_additive .)
    PLUS            shift and go to state 66
    MINUS           shift and go to state 67


state 33

    (38) select_instruction -> cond_instruction . instruction
    (39) select_instruction -> cond_instruction . instruction ELSE instruction
    (21) instruction -> . SEMI_COL
    (22) instruction -> . compound_instruction
    (23) instruction -> . expression_instruction
    (24) instruction -> . iteration_instruction
    (25) instruction -> . select_instruction
    (26) instruction -> . jump_instruction
    (30) compound_instruction -> . block_start declaration_list instruction_list block_end
    (31) compound_instruction -> . block_start declaration_list block_end
    (32) compound_instruction -> . block_start instruction_list block_end
    (33) compound_instruction -> . block_start block_end
    (27) expression_instruction -> . expression SEMI_COL
    (28) expression_instruction -> . assignment SEMI_COL
    (41) iteration_instruction -> . WHILE L_PARENTHESIS condition R_PARENTHESIS instruction
    (42) iteration_instruction -> . DO instruction WHILE L_PARENTHESIS condition R_PARENTHESIS SEMI_COL
    (43) iteration_instruction -> . FOR L_PARENTHESIS assignment SEMI_COL condition SEMI_COL assignment R_PARENTHESIS instruction
    (38) select_instruction -> . cond_instruction instruction
    (39) select_instruction -> . cond_instruction instruction ELSE instruction
    (44) jump_instruction -> . RETURN expression SEMI_COL
    (34) block_start -> . LEFT_BRACKET
    (53) expression -> . expression_additive
    (54) expression -> . expression SHIFTLEFT expression_additive
    (55) expression -> . expression SHIFTRIGHT expression_additive
    (29) assignment -> . IDENT ASSIGNMENT expression
    (40) cond_instruction -> . IF L_PARENTHESIS condition R_PARENTHESIS
    (56) expression_additive -> . expression_multiplicative
    (57) expression_additive -> . expression_additive PLUS expression_multiplicative
    (58) expression_additive -> . expression_additive MINUS expression_multiplicative
    (59) expression_multiplicative -> . unary_expression
    (60) expression_multiplicative -> . expression_multiplicative MULTI unary_expression
    (61) expression_multiplicative -> . expression_multiplicative DIV unary_expression
    (62) expression_multiplicative -> . expression_multiplicative MODULO unary_expression
    (63) unary_expression -> . postfix_expression
    (64) unary_expression -> . MINUS unary_expression
    (65) postfix_expression -> . primary_expression
    (66) postfix_expression -> . IDENT L_PARENTHESIS argument_expression_list R_PARENTHESIS
    (67) postfix_expression -> . IDENT L_PARENTHESIS R_PARENTHESIS
    (70) primary_expression -> . IDENT
    (71) primary_expression -> . CONST_INT
    (72) primary_expression -> . CONST_STRING
    (73) primary_expression -> . L_PARENTHESIS expression R_PARENTHESIS
    (74) primary_expression -> . CHAR

    SEMI_COL        shift and go to state 39
    WHILE           shift and go to state 36
    DO              shift and go to state 28
    FOR             shift and go to state 48
    RETURN          shift and go to state 30
    LEFT_BRACKET    shift and go to state 21
    IDENT           shift and go to state 45
    IF              shift and go to state 43
    MINUS           shift and go to state 38
    CONST_INT       shift and go to state 37
    CONST_STRING    shift and go to state 29
    L_PARENTHESIS   shift and go to state 41
    CHAR            shift and go to state 35

    expression_instruction         shift and go to state 44
    iteration_instruction          shift and go to state 47
    unary_expression               shift and go to state 31
    assignment                     shift and go to state 49
    compound_instruction           shift and go to state 53
    instruction                    shift and go to state 68
    cond_instruction               shift and go to state 33
    postfix_expression             shift and go to state 40
    block_start                    shift and go to state 20
    expression_multiplicative      shift and go to state 58
    select_instruction             shift and go to state 56
    jump_instruction               shift and go to state 42
    expression                     shift and go to state 57
    expression_additive            shift and go to state 32
    primary_expression             shift and go to state 51

state 34

    (35) block_end -> RIGHT_BRACKET .

    EXTERN          reduce using rule 35 (block_end -> RIGHT_BRACKET .)
    INT             reduce using rule 35 (block_end -> RIGHT_BRACKET .)
    STRING          reduce using rule 35 (block_end -> RIGHT_BRACKET .)
    $end            reduce using rule 35 (block_end -> RIGHT_BRACKET .)
    RIGHT_BRACKET   reduce using rule 35 (block_end -> RIGHT_BRACKET .)
    SEMI_COL        reduce using rule 35 (block_end -> RIGHT_BRACKET .)
    WHILE           reduce using rule 35 (block_end -> RIGHT_BRACKET .)
    DO              reduce using rule 35 (block_end -> RIGHT_BRACKET .)
    FOR             reduce using rule 35 (block_end -> RIGHT_BRACKET .)
    RETURN          reduce using rule 35 (block_end -> RIGHT_BRACKET .)
    LEFT_BRACKET    reduce using rule 35 (block_end -> RIGHT_BRACKET .)
    IDENT           reduce using rule 35 (block_end -> RIGHT_BRACKET .)
    IF              reduce using rule 35 (block_end -> RIGHT_BRACKET .)
    MINUS           reduce using rule 35 (block_end -> RIGHT_BRACKET .)
    CONST_INT       reduce using rule 35 (block_end -> RIGHT_BRACKET .)
    CONST_STRING    reduce using rule 35 (block_end -> RIGHT_BRACKET .)
    L_PARENTHESIS   reduce using rule 35 (block_end -> RIGHT_BRACKET .)
    CHAR            reduce using rule 35 (block_end -> RIGHT_BRACKET .)
    ELSE            reduce using rule 35 (block_end -> RIGHT_BRACKET .)


state 35

    (74) primary_expression -> CHAR .

    MULTI           reduce using rule 74 (primary_expression -> CHAR .)
    DIV             reduce using rule 74 (primary_expression -> CHAR .)
    MODULO          reduce using rule 74 (primary_expression -> CHAR .)
    PLUS            reduce using rule 74 (primary_expression -> CHAR .)
    MINUS           reduce using rule 74 (primary_expression -> CHAR .)
    SHIFTLEFT       reduce using rule 74 (primary_expression -> CHAR .)
    SHIFTRIGHT      reduce using rule 74 (primary_expression -> CHAR .)
    R_PARENTHESIS   reduce using rule 74 (primary_expression -> CHAR .)
    COMMA           reduce using rule 74 (primary_expression -> CHAR .)
    SEMI_COL        reduce using rule 74 (primary_expression -> CHAR .)
    EGAL            reduce using rule 74 (primary_expression -> CHAR .)
    DIFF            reduce using rule 74 (primary_expression -> CHAR .)
    INF             reduce using rule 74 (primary_expression -> CHAR .)
    SUP             reduce using rule 74 (primary_expression -> CHAR .)
    INFEQUAL        reduce using rule 74 (primary_expression -> CHAR .)
    SUPEQUAL        reduce using rule 74 (primary_expression -> CHAR .)


state 36

    (41) iteration_instruction -> WHILE . L_PARENTHESIS condition R_PARENTHESIS instruction

    L_PARENTHESIS   shift and go to state 69


state 37

    (71) primary_expression -> CONST_INT .

    MULTI           reduce using rule 71 (primary_expression -> CONST_INT .)
    DIV             reduce using rule 71 (primary_expression -> CONST_INT .)
    MODULO          reduce using rule 71 (primary_expression -> CONST_INT .)
    PLUS            reduce using rule 71 (primary_expression -> CONST_INT .)
    MINUS           reduce using rule 71 (primary_expression -> CONST_INT .)
    SHIFTLEFT       reduce using rule 71 (primary_expression -> CONST_INT .)
    SHIFTRIGHT      reduce using rule 71 (primary_expression -> CONST_INT .)
    R_PARENTHESIS   reduce using rule 71 (primary_expression -> CONST_INT .)
    COMMA           reduce using rule 71 (primary_expression -> CONST_INT .)
    SEMI_COL        reduce using rule 71 (primary_expression -> CONST_INT .)
    EGAL            reduce using rule 71 (primary_expression -> CONST_INT .)
    DIFF            reduce using rule 71 (primary_expression -> CONST_INT .)
    INF             reduce using rule 71 (primary_expression -> CONST_INT .)
    SUP             reduce using rule 71 (primary_expression -> CONST_INT .)
    INFEQUAL        reduce using rule 71 (primary_expression -> CONST_INT .)
    SUPEQUAL        reduce using rule 71 (primary_expression -> CONST_INT .)


state 38

    (64) unary_expression -> MINUS . unary_expression
    (63) unary_expression -> . postfix_expression
    (64) unary_expression -> . MINUS unary_expression
    (65) postfix_expression -> . primary_expression
    (66) postfix_expression -> . IDENT L_PARENTHESIS argument_expression_list R_PARENTHESIS
    (67) postfix_expression -> . IDENT L_PARENTHESIS R_PARENTHESIS
    (70) primary_expression -> . IDENT
    (71) primary_expression -> . CONST_INT
    (72) primary_expression -> . CONST_STRING
    (73) primary_expression -> . L_PARENTHESIS expression R_PARENTHESIS
    (74) primary_expression -> . CHAR

    MINUS           shift and go to state 38
    IDENT           shift and go to state 64
    CONST_INT       shift and go to state 37
    CONST_STRING    shift and go to state 29
    L_PARENTHESIS   shift and go to state 41
    CHAR            shift and go to state 35

    postfix_expression             shift and go to state 40
    unary_expression               shift and go to state 70
    primary_expression             shift and go to state 51

state 39

    (21) instruction -> SEMI_COL .

    ELSE            reduce using rule 21 (instruction -> SEMI_COL .)
    RIGHT_BRACKET   reduce using rule 21 (instruction -> SEMI_COL .)
    SEMI_COL        reduce using rule 21 (instruction -> SEMI_COL .)
    WHILE           reduce using rule 21 (instruction -> SEMI_COL .)
    DO              reduce using rule 21 (instruction -> SEMI_COL .)
    FOR             reduce using rule 21 (instruction -> SEMI_COL .)
    RETURN          reduce using rule 21 (instruction -> SEMI_COL .)
    LEFT_BRACKET    reduce using rule 21 (instruction -> SEMI_COL .)
    IDENT           reduce using rule 21 (instruction -> SEMI_COL .)
    IF              reduce using rule 21 (instruction -> SEMI_COL .)
    MINUS           reduce using rule 21 (instruction -> SEMI_COL .)
    CONST_INT       reduce using rule 21 (instruction -> SEMI_COL .)
    CONST_STRING    reduce using rule 21 (instruction -> SEMI_COL .)
    L_PARENTHESIS   reduce using rule 21 (instruction -> SEMI_COL .)
    CHAR            reduce using rule 21 (instruction -> SEMI_COL .)


state 40

    (63) unary_expression -> postfix_expression .

    MULTI           reduce using rule 63 (unary_expression -> postfix_expression .)
    DIV             reduce using rule 63 (unary_expression -> postfix_expression .)
    MODULO          reduce using rule 63 (unary_expression -> postfix_expression .)
    PLUS            reduce using rule 63 (unary_expression -> postfix_expression .)
    MINUS           reduce using rule 63 (unary_expression -> postfix_expression .)
    SEMI_COL        reduce using rule 63 (unary_expression -> postfix_expression .)
    SHIFTLEFT       reduce using rule 63 (unary_expression -> postfix_expression .)
    SHIFTRIGHT      reduce using rule 63 (unary_expression -> postfix_expression .)
    R_PARENTHESIS   reduce using rule 63 (unary_expression -> postfix_expression .)
    EGAL            reduce using rule 63 (unary_expression -> postfix_expression .)
    DIFF            reduce using rule 63 (unary_expression -> postfix_expression .)
    INF             reduce using rule 63 (unary_expression -> postfix_expression .)
    SUP             reduce using rule 63 (unary_expression -> postfix_expression .)
    INFEQUAL        reduce using rule 63 (unary_expression -> postfix_expression .)
    SUPEQUAL        reduce using rule 63 (unary_expression -> postfix_expression .)
    COMMA           reduce using rule 63 (unary_expression -> postfix_expression .)


state 41

    (73) primary_expression -> L_PARENTHESIS . expression R_PARENTHESIS
    (53) expression -> . expression_additive
    (54) expression -> . expression SHIFTLEFT expression_additive
    (55) expression -> . expression SHIFTRIGHT expression_additive
    (56) expression_additive -> . expression_multiplicative
    (57) expression_additive -> . expression_additive PLUS expression_multiplicative
    (58) expression_additive -> . expression_additive MINUS expression_multiplicative
    (59) expression_multiplicative -> . unary_expression
    (60) expression_multiplicative -> . expression_multiplicative MULTI unary_expression
    (61) expression_multiplicative -> . expression_multiplicative DIV unary_expression
    (62) expression_multiplicative -> . expression_multiplicative MODULO unary_expression
    (63) unary_expression -> . postfix_expression
    (64) unary_expression -> . MINUS unary_expression
    (65) postfix_expression -> . primary_expression
    (66) postfix_expression -> . IDENT L_PARENTHESIS argument_expression_list R_PARENTHESIS
    (67) postfix_expression -> . IDENT L_PARENTHESIS R_PARENTHESIS
    (70) primary_expression -> . IDENT
    (71) primary_expression -> . CONST_INT
    (72) primary_expression -> . CONST_STRING
    (73) primary_expression -> . L_PARENTHESIS expression R_PARENTHESIS
    (74) primary_expression -> . CHAR

    MINUS           shift and go to state 38
    IDENT           shift and go to state 64
    CONST_INT       shift and go to state 37
    CONST_STRING    shift and go to state 29
    L_PARENTHESIS   shift and go to state 41
    CHAR            shift and go to state 35

    unary_expression               shift and go to state 31
    expression_additive            shift and go to state 32
    postfix_expression             shift and go to state 40
    primary_expression             shift and go to state 51
    expression                     shift and go to state 71
    expression_multiplicative      shift and go to state 58

state 42

    (26) instruction -> jump_instruction .

    ELSE            reduce using rule 26 (instruction -> jump_instruction .)
    RIGHT_BRACKET   reduce using rule 26 (instruction -> jump_instruction .)
    SEMI_COL        reduce using rule 26 (instruction -> jump_instruction .)
    WHILE           reduce using rule 26 (instruction -> jump_instruction .)
    DO              reduce using rule 26 (instruction -> jump_instruction .)
    FOR             reduce using rule 26 (instruction -> jump_instruction .)
    RETURN          reduce using rule 26 (instruction -> jump_instruction .)
    LEFT_BRACKET    reduce using rule 26 (instruction -> jump_instruction .)
    IDENT           reduce using rule 26 (instruction -> jump_instruction .)
    IF              reduce using rule 26 (instruction -> jump_instruction .)
    MINUS           reduce using rule 26 (instruction -> jump_instruction .)
    CONST_INT       reduce using rule 26 (instruction -> jump_instruction .)
    CONST_STRING    reduce using rule 26 (instruction -> jump_instruction .)
    L_PARENTHESIS   reduce using rule 26 (instruction -> jump_instruction .)
    CHAR            reduce using rule 26 (instruction -> jump_instruction .)


state 43

    (40) cond_instruction -> IF . L_PARENTHESIS condition R_PARENTHESIS

    L_PARENTHESIS   shift and go to state 72


state 44

    (23) instruction -> expression_instruction .

    ELSE            reduce using rule 23 (instruction -> expression_instruction .)
    RIGHT_BRACKET   reduce using rule 23 (instruction -> expression_instruction .)
    SEMI_COL        reduce using rule 23 (instruction -> expression_instruction .)
    WHILE           reduce using rule 23 (instruction -> expression_instruction .)
    DO              reduce using rule 23 (instruction -> expression_instruction .)
    FOR             reduce using rule 23 (instruction -> expression_instruction .)
    RETURN          reduce using rule 23 (instruction -> expression_instruction .)
    LEFT_BRACKET    reduce using rule 23 (instruction -> expression_instruction .)
    IDENT           reduce using rule 23 (instruction -> expression_instruction .)
    IF              reduce using rule 23 (instruction -> expression_instruction .)
    MINUS           reduce using rule 23 (instruction -> expression_instruction .)
    CONST_INT       reduce using rule 23 (instruction -> expression_instruction .)
    CONST_STRING    reduce using rule 23 (instruction -> expression_instruction .)
    L_PARENTHESIS   reduce using rule 23 (instruction -> expression_instruction .)
    CHAR            reduce using rule 23 (instruction -> expression_instruction .)


state 45

    (29) assignment -> IDENT . ASSIGNMENT expression
    (66) postfix_expression -> IDENT . L_PARENTHESIS argument_expression_list R_PARENTHESIS
    (67) postfix_expression -> IDENT . L_PARENTHESIS R_PARENTHESIS
    (70) primary_expression -> IDENT .

    ASSIGNMENT      shift and go to state 73
    L_PARENTHESIS   shift and go to state 74
    MULTI           reduce using rule 70 (primary_expression -> IDENT .)
    DIV             reduce using rule 70 (primary_expression -> IDENT .)
    MODULO          reduce using rule 70 (primary_expression -> IDENT .)
    PLUS            reduce using rule 70 (primary_expression -> IDENT .)
    MINUS           reduce using rule 70 (primary_expression -> IDENT .)
    SEMI_COL        reduce using rule 70 (primary_expression -> IDENT .)
    SHIFTLEFT       reduce using rule 70 (primary_expression -> IDENT .)
    SHIFTRIGHT      reduce using rule 70 (primary_expression -> IDENT .)


state 46

    (33) compound_instruction -> block_start block_end .

    RIGHT_BRACKET   reduce using rule 33 (compound_instruction -> block_start block_end .)
    SEMI_COL        reduce using rule 33 (compound_instruction -> block_start block_end .)
    WHILE           reduce using rule 33 (compound_instruction -> block_start block_end .)
    DO              reduce using rule 33 (compound_instruction -> block_start block_end .)
    FOR             reduce using rule 33 (compound_instruction -> block_start block_end .)
    RETURN          reduce using rule 33 (compound_instruction -> block_start block_end .)
    LEFT_BRACKET    reduce using rule 33 (compound_instruction -> block_start block_end .)
    IDENT           reduce using rule 33 (compound_instruction -> block_start block_end .)
    IF              reduce using rule 33 (compound_instruction -> block_start block_end .)
    MINUS           reduce using rule 33 (compound_instruction -> block_start block_end .)
    CONST_INT       reduce using rule 33 (compound_instruction -> block_start block_end .)
    CONST_STRING    reduce using rule 33 (compound_instruction -> block_start block_end .)
    L_PARENTHESIS   reduce using rule 33 (compound_instruction -> block_start block_end .)
    CHAR            reduce using rule 33 (compound_instruction -> block_start block_end .)
    ELSE            reduce using rule 33 (compound_instruction -> block_start block_end .)
    EXTERN          reduce using rule 33 (compound_instruction -> block_start block_end .)
    INT             reduce using rule 33 (compound_instruction -> block_start block_end .)
    STRING          reduce using rule 33 (compound_instruction -> block_start block_end .)
    $end            reduce using rule 33 (compound_instruction -> block_start block_end .)


state 47

    (24) instruction -> iteration_instruction .

    ELSE            reduce using rule 24 (instruction -> iteration_instruction .)
    RIGHT_BRACKET   reduce using rule 24 (instruction -> iteration_instruction .)
    SEMI_COL        reduce using rule 24 (instruction -> iteration_instruction .)
    WHILE           reduce using rule 24 (instruction -> iteration_instruction .)
    DO              reduce using rule 24 (instruction -> iteration_instruction .)
    FOR             reduce using rule 24 (instruction -> iteration_instruction .)
    RETURN          reduce using rule 24 (instruction -> iteration_instruction .)
    LEFT_BRACKET    reduce using rule 24 (instruction -> iteration_instruction .)
    IDENT           reduce using rule 24 (instruction -> iteration_instruction .)
    IF              reduce using rule 24 (instruction -> iteration_instruction .)
    MINUS           reduce using rule 24 (instruction -> iteration_instruction .)
    CONST_INT       reduce using rule 24 (instruction -> iteration_instruction .)
    CONST_STRING    reduce using rule 24 (instruction -> iteration_instruction .)
    L_PARENTHESIS   reduce using rule 24 (instruction -> iteration_instruction .)
    CHAR            reduce using rule 24 (instruction -> iteration_instruction .)


state 48

    (43) iteration_instruction -> FOR . L_PARENTHESIS assignment SEMI_COL condition SEMI_COL assignment R_PARENTHESIS instruction

    L_PARENTHESIS   shift and go to state 75


state 49

    (28) expression_instruction -> assignment . SEMI_COL

    SEMI_COL        shift and go to state 76


state 50

    (32) compound_instruction -> block_start instruction_list . block_end
    (37) instruction_list -> instruction_list . instruction
    (35) block_end -> . RIGHT_BRACKET
    (21) instruction -> . SEMI_COL
    (22) instruction -> . compound_instruction
    (23) instruction -> . expression_instruction
    (24) instruction -> . iteration_instruction
    (25) instruction -> . select_instruction
    (26) instruction -> . jump_instruction
    (30) compound_instruction -> . block_start declaration_list instruction_list block_end
    (31) compound_instruction -> . block_start declaration_list block_end
    (32) compound_instruction -> . block_start instruction_list block_end
    (33) compound_instruction -> . block_start block_end
    (27) expression_instruction -> . expression SEMI_COL
    (28) expression_instruction -> . assignment SEMI_COL
    (41) iteration_instruction -> . WHILE L_PARENTHESIS condition R_PARENTHESIS instruction
    (42) iteration_instruction -> . DO instruction WHILE L_PARENTHESIS condition R_PARENTHESIS SEMI_COL
    (43) iteration_instruction -> . FOR L_PARENTHESIS assignment SEMI_COL condition SEMI_COL assignment R_PARENTHESIS instruction
    (38) select_instruction -> . cond_instruction instruction
    (39) select_instruction -> . cond_instruction instruction ELSE instruction
    (44) jump_instruction -> . RETURN expression SEMI_COL
    (34) block_start -> . LEFT_BRACKET
    (53) expression -> . expression_additive
    (54) expression -> . expression SHIFTLEFT expression_additive
    (55) expression -> . expression SHIFTRIGHT expression_additive
    (29) assignment -> . IDENT ASSIGNMENT expression
    (40) cond_instruction -> . IF L_PARENTHESIS condition R_PARENTHESIS
    (56) expression_additive -> . expression_multiplicative
    (57) expression_additive -> . expression_additive PLUS expression_multiplicative
    (58) expression_additive -> . expression_additive MINUS expression_multiplicative
    (59) expression_multiplicative -> . unary_expression
    (60) expression_multiplicative -> . expression_multiplicative MULTI unary_expression
    (61) expression_multiplicative -> . expression_multiplicative DIV unary_expression
    (62) expression_multiplicative -> . expression_multiplicative MODULO unary_expression
    (63) unary_expression -> . postfix_expression
    (64) unary_expression -> . MINUS unary_expression
    (65) postfix_expression -> . primary_expression
    (66) postfix_expression -> . IDENT L_PARENTHESIS argument_expression_list R_PARENTHESIS
    (67) postfix_expression -> . IDENT L_PARENTHESIS R_PARENTHESIS
    (70) primary_expression -> . IDENT
    (71) primary_expression -> . CONST_INT
    (72) primary_expression -> . CONST_STRING
    (73) primary_expression -> . L_PARENTHESIS expression R_PARENTHESIS
    (74) primary_expression -> . CHAR

    RIGHT_BRACKET   shift and go to state 34
    SEMI_COL        shift and go to state 39
    WHILE           shift and go to state 36
    DO              shift and go to state 28
    FOR             shift and go to state 48
    RETURN          shift and go to state 30
    LEFT_BRACKET    shift and go to state 21
    IDENT           shift and go to state 45
    IF              shift and go to state 43
    MINUS           shift and go to state 38
    CONST_INT       shift and go to state 37
    CONST_STRING    shift and go to state 29
    L_PARENTHESIS   shift and go to state 41
    CHAR            shift and go to state 35

    expression_instruction         shift and go to state 44
    block_end                      shift and go to state 77
    iteration_instruction          shift and go to state 47
    unary_expression               shift and go to state 31
    assignment                     shift and go to state 49
    compound_instruction           shift and go to state 53
    instruction                    shift and go to state 78
    block_start                    shift and go to state 20
    postfix_expression             shift and go to state 40
    cond_instruction               shift and go to state 33
    expression_multiplicative      shift and go to state 58
    select_instruction             shift and go to state 56
    jump_instruction               shift and go to state 42
    expression                     shift and go to state 57
    expression_additive            shift and go to state 32
    primary_expression             shift and go to state 51

state 51

    (65) postfix_expression -> primary_expression .

    MULTI           reduce using rule 65 (postfix_expression -> primary_expression .)
    DIV             reduce using rule 65 (postfix_expression -> primary_expression .)
    MODULO          reduce using rule 65 (postfix_expression -> primary_expression .)
    PLUS            reduce using rule 65 (postfix_expression -> primary_expression .)
    MINUS           reduce using rule 65 (postfix_expression -> primary_expression .)
    SHIFTLEFT       reduce using rule 65 (postfix_expression -> primary_expression .)
    SHIFTRIGHT      reduce using rule 65 (postfix_expression -> primary_expression .)
    EGAL            reduce using rule 65 (postfix_expression -> primary_expression .)
    DIFF            reduce using rule 65 (postfix_expression -> primary_expression .)
    INF             reduce using rule 65 (postfix_expression -> primary_expression .)
    SUP             reduce using rule 65 (postfix_expression -> primary_expression .)
    INFEQUAL        reduce using rule 65 (postfix_expression -> primary_expression .)
    SUPEQUAL        reduce using rule 65 (postfix_expression -> primary_expression .)
    R_PARENTHESIS   reduce using rule 65 (postfix_expression -> primary_expression .)
    SEMI_COL        reduce using rule 65 (postfix_expression -> primary_expression .)
    COMMA           reduce using rule 65 (postfix_expression -> primary_expression .)


state 52

    (12) declaration_list -> declaration .

    RIGHT_BRACKET   reduce using rule 12 (declaration_list -> declaration .)
    SEMI_COL        reduce using rule 12 (declaration_list -> declaration .)
    INT             reduce using rule 12 (declaration_list -> declaration .)
    STRING          reduce using rule 12 (declaration_list -> declaration .)
    WHILE           reduce using rule 12 (declaration_list -> declaration .)
    DO              reduce using rule 12 (declaration_list -> declaration .)
    FOR             reduce using rule 12 (declaration_list -> declaration .)
    RETURN          reduce using rule 12 (declaration_list -> declaration .)
    LEFT_BRACKET    reduce using rule 12 (declaration_list -> declaration .)
    IDENT           reduce using rule 12 (declaration_list -> declaration .)
    IF              reduce using rule 12 (declaration_list -> declaration .)
    MINUS           reduce using rule 12 (declaration_list -> declaration .)
    CONST_INT       reduce using rule 12 (declaration_list -> declaration .)
    CONST_STRING    reduce using rule 12 (declaration_list -> declaration .)
    L_PARENTHESIS   reduce using rule 12 (declaration_list -> declaration .)
    CHAR            reduce using rule 12 (declaration_list -> declaration .)


state 53

    (22) instruction -> compound_instruction .

    ELSE            reduce using rule 22 (instruction -> compound_instruction .)
    RIGHT_BRACKET   reduce using rule 22 (instruction -> compound_instruction .)
    SEMI_COL        reduce using rule 22 (instruction -> compound_instruction .)
    WHILE           reduce using rule 22 (instruction -> compound_instruction .)
    DO              reduce using rule 22 (instruction -> compound_instruction .)
    FOR             reduce using rule 22 (instruction -> compound_instruction .)
    RETURN          reduce using rule 22 (instruction -> compound_instruction .)
    LEFT_BRACKET    reduce using rule 22 (instruction -> compound_instruction .)
    IDENT           reduce using rule 22 (instruction -> compound_instruction .)
    IF              reduce using rule 22 (instruction -> compound_instruction .)
    MINUS           reduce using rule 22 (instruction -> compound_instruction .)
    CONST_INT       reduce using rule 22 (instruction -> compound_instruction .)
    CONST_STRING    reduce using rule 22 (instruction -> compound_instruction .)
    L_PARENTHESIS   reduce using rule 22 (instruction -> compound_instruction .)
    CHAR            reduce using rule 22 (instruction -> compound_instruction .)


state 54

    (36) instruction_list -> instruction .

    RIGHT_BRACKET   reduce using rule 36 (instruction_list -> instruction .)
    SEMI_COL        reduce using rule 36 (instruction_list -> instruction .)
    WHILE           reduce using rule 36 (instruction_list -> instruction .)
    DO              reduce using rule 36 (instruction_list -> instruction .)
    FOR             reduce using rule 36 (instruction_list -> instruction .)
    RETURN          reduce using rule 36 (instruction_list -> instruction .)
    LEFT_BRACKET    reduce using rule 36 (instruction_list -> instruction .)
    IDENT           reduce using rule 36 (instruction_list -> instruction .)
    IF              reduce using rule 36 (instruction_list -> instruction .)
    MINUS           reduce using rule 36 (instruction_list -> instruction .)
    CONST_INT       reduce using rule 36 (instruction_list -> instruction .)
    CONST_STRING    reduce using rule 36 (instruction_list -> instruction .)
    L_PARENTHESIS   reduce using rule 36 (instruction_list -> instruction .)
    CHAR            reduce using rule 36 (instruction_list -> instruction .)


state 55

    (30) compound_instruction -> block_start declaration_list . instruction_list block_end
    (31) compound_instruction -> block_start declaration_list . block_end
    (13) declaration_list -> declaration_list . declaration
    (36) instruction_list -> . instruction
    (37) instruction_list -> . instruction_list instruction
    (35) block_end -> . RIGHT_BRACKET
    (7) declaration -> . type declarator_list SEMI_COL
    (21) instruction -> . SEMI_COL
    (22) instruction -> . compound_instruction
    (23) instruction -> . expression_instruction
    (24) instruction -> . iteration_instruction
    (25) instruction -> . select_instruction
    (26) instruction -> . jump_instruction
    (8) type -> . INT
    (9) type -> . STRING
    (30) compound_instruction -> . block_start declaration_list instruction_list block_end
    (31) compound_instruction -> . block_start declaration_list block_end
    (32) compound_instruction -> . block_start instruction_list block_end
    (33) compound_instruction -> . block_start block_end
    (27) expression_instruction -> . expression SEMI_COL
    (28) expression_instruction -> . assignment SEMI_COL
    (41) iteration_instruction -> . WHILE L_PARENTHESIS condition R_PARENTHESIS instruction
    (42) iteration_instruction -> . DO instruction WHILE L_PARENTHESIS condition R_PARENTHESIS SEMI_COL
    (43) iteration_instruction -> . FOR L_PARENTHESIS assignment SEMI_COL condition SEMI_COL assignment R_PARENTHESIS instruction
    (38) select_instruction -> . cond_instruction instruction
    (39) select_instruction -> . cond_instruction instruction ELSE instruction
    (44) jump_instruction -> . RETURN expression SEMI_COL
    (34) block_start -> . LEFT_BRACKET
    (53) expression -> . expression_additive
    (54) expression -> . expression SHIFTLEFT expression_additive
    (55) expression -> . expression SHIFTRIGHT expression_additive
    (29) assignment -> . IDENT ASSIGNMENT expression
    (40) cond_instruction -> . IF L_PARENTHESIS condition R_PARENTHESIS
    (56) expression_additive -> . expression_multiplicative
    (57) expression_additive -> . expression_additive PLUS expression_multiplicative
    (58) expression_additive -> . expression_additive MINUS expression_multiplicative
    (59) expression_multiplicative -> . unary_expression
    (60) expression_multiplicative -> . expression_multiplicative MULTI unary_expression
    (61) expression_multiplicative -> . expression_multiplicative DIV unary_expression
    (62) expression_multiplicative -> . expression_multiplicative MODULO unary_expression
    (63) unary_expression -> . postfix_expression
    (64) unary_expression -> . MINUS unary_expression
    (65) postfix_expression -> . primary_expression
    (66) postfix_expression -> . IDENT L_PARENTHESIS argument_expression_list R_PARENTHESIS
    (67) postfix_expression -> . IDENT L_PARENTHESIS R_PARENTHESIS
    (70) primary_expression -> . IDENT
    (71) primary_expression -> . CONST_INT
    (72) primary_expression -> . CONST_STRING
    (73) primary_expression -> . L_PARENTHESIS expression R_PARENTHESIS
    (74) primary_expression -> . CHAR

    RIGHT_BRACKET   shift and go to state 34
    SEMI_COL        shift and go to state 39
    INT             shift and go to state 3
    STRING          shift and go to state 2
    WHILE           shift and go to state 36
    DO              shift and go to state 28
    FOR             shift and go to state 48
    RETURN          shift and go to state 30
    LEFT_BRACKET    shift and go to state 21
    IDENT           shift and go to state 45
    IF              shift and go to state 43
    MINUS           shift and go to state 38
    CONST_INT       shift and go to state 37
    CONST_STRING    shift and go to state 29
    L_PARENTHESIS   shift and go to state 41
    CHAR            shift and go to state 35

    unary_expression               shift and go to state 31
    expression_additive            shift and go to state 32
    cond_instruction               shift and go to state 33
    postfix_expression             shift and go to state 40
    jump_instruction               shift and go to state 42
    type                           shift and go to state 11
    expression_instruction         shift and go to state 44
    block_end                      shift and go to state 79
    iteration_instruction          shift and go to state 47
    assignment                     shift and go to state 49
    instruction_list               shift and go to state 80
    primary_expression             shift and go to state 51
    declaration                    shift and go to state 81
    compound_instruction           shift and go to state 53
    instruction                    shift and go to state 54
    block_start                    shift and go to state 20
    select_instruction             shift and go to state 56
    expression                     shift and go to state 57
    expression_multiplicative      shift and go to state 58

state 56

    (25) instruction -> select_instruction .

    ELSE            reduce using rule 25 (instruction -> select_instruction .)
    RIGHT_BRACKET   reduce using rule 25 (instruction -> select_instruction .)
    SEMI_COL        reduce using rule 25 (instruction -> select_instruction .)
    WHILE           reduce using rule 25 (instruction -> select_instruction .)
    DO              reduce using rule 25 (instruction -> select_instruction .)
    FOR             reduce using rule 25 (instruction -> select_instruction .)
    RETURN          reduce using rule 25 (instruction -> select_instruction .)
    LEFT_BRACKET    reduce using rule 25 (instruction -> select_instruction .)
    IDENT           reduce using rule 25 (instruction -> select_instruction .)
    IF              reduce using rule 25 (instruction -> select_instruction .)
    MINUS           reduce using rule 25 (instruction -> select_instruction .)
    CONST_INT       reduce using rule 25 (instruction -> select_instruction .)
    CONST_STRING    reduce using rule 25 (instruction -> select_instruction .)
    L_PARENTHESIS   reduce using rule 25 (instruction -> select_instruction .)
    CHAR            reduce using rule 25 (instruction -> select_instruction .)


state 57

    (27) expression_instruction -> expression . SEMI_COL
    (54) expression -> expression . SHIFTLEFT expression_additive
    (55) expression -> expression . SHIFTRIGHT expression_additive

    SEMI_COL        shift and go to state 83
    SHIFTLEFT       shift and go to state 84
    SHIFTRIGHT      shift and go to state 82


state 58

    (56) expression_additive -> expression_multiplicative .
    (60) expression_multiplicative -> expression_multiplicative . MULTI unary_expression
    (61) expression_multiplicative -> expression_multiplicative . DIV unary_expression
    (62) expression_multiplicative -> expression_multiplicative . MODULO unary_expression

    PLUS            reduce using rule 56 (expression_additive -> expression_multiplicative .)
    MINUS           reduce using rule 56 (expression_additive -> expression_multiplicative .)
    SEMI_COL        reduce using rule 56 (expression_additive -> expression_multiplicative .)
    SHIFTLEFT       reduce using rule 56 (expression_additive -> expression_multiplicative .)
    SHIFTRIGHT      reduce using rule 56 (expression_additive -> expression_multiplicative .)
    R_PARENTHESIS   reduce using rule 56 (expression_additive -> expression_multiplicative .)
    EGAL            reduce using rule 56 (expression_additive -> expression_multiplicative .)
    DIFF            reduce using rule 56 (expression_additive -> expression_multiplicative .)
    INF             reduce using rule 56 (expression_additive -> expression_multiplicative .)
    SUP             reduce using rule 56 (expression_additive -> expression_multiplicative .)
    INFEQUAL        reduce using rule 56 (expression_additive -> expression_multiplicative .)
    SUPEQUAL        reduce using rule 56 (expression_additive -> expression_multiplicative .)
    COMMA           reduce using rule 56 (expression_additive -> expression_multiplicative .)
    MULTI           shift and go to state 86
    DIV             shift and go to state 85
    MODULO          shift and go to state 87


state 59

    (11) declarator_list -> declarator_list COMMA declarator .

    SEMI_COL        reduce using rule 11 (declarator_list -> declarator_list COMMA declarator .)
    COMMA           reduce using rule 11 (declarator_list -> declarator_list COMMA declarator .)


state 60

    (17) function_declarator -> IDENT L_PARENTHESIS parameter_list R_PARENTHESIS .

    SEMI_COL        reduce using rule 17 (function_declarator -> IDENT L_PARENTHESIS parameter_list R_PARENTHESIS .)
    COMMA           reduce using rule 17 (function_declarator -> IDENT L_PARENTHESIS parameter_list R_PARENTHESIS .)
    LEFT_BRACKET    reduce using rule 17 (function_declarator -> IDENT L_PARENTHESIS parameter_list R_PARENTHESIS .)


state 61

    (19) parameter_list -> parameter_list COMMA . parameter_declaration
    (20) parameter_declaration -> . type IDENT
    (8) type -> . INT
    (9) type -> . STRING

    INT             shift and go to state 3
    STRING          shift and go to state 2

    parameter_declaration          shift and go to state 88
    type                           shift and go to state 27

state 62

    (20) parameter_declaration -> type IDENT .

    R_PARENTHESIS   reduce using rule 20 (parameter_declaration -> type IDENT .)
    COMMA           reduce using rule 20 (parameter_declaration -> type IDENT .)


state 63

    (42) iteration_instruction -> DO instruction . WHILE L_PARENTHESIS condition R_PARENTHESIS SEMI_COL

    WHILE           shift and go to state 89


state 64

    (66) postfix_expression -> IDENT . L_PARENTHESIS argument_expression_list R_PARENTHESIS
    (67) postfix_expression -> IDENT . L_PARENTHESIS R_PARENTHESIS
    (70) primary_expression -> IDENT .

    L_PARENTHESIS   shift and go to state 74
    MULTI           reduce using rule 70 (primary_expression -> IDENT .)
    DIV             reduce using rule 70 (primary_expression -> IDENT .)
    MODULO          reduce using rule 70 (primary_expression -> IDENT .)
    PLUS            reduce using rule 70 (primary_expression -> IDENT .)
    MINUS           reduce using rule 70 (primary_expression -> IDENT .)
    SHIFTLEFT       reduce using rule 70 (primary_expression -> IDENT .)
    SHIFTRIGHT      reduce using rule 70 (primary_expression -> IDENT .)
    R_PARENTHESIS   reduce using rule 70 (primary_expression -> IDENT .)
    COMMA           reduce using rule 70 (primary_expression -> IDENT .)
    SEMI_COL        reduce using rule 70 (primary_expression -> IDENT .)
    EGAL            reduce using rule 70 (primary_expression -> IDENT .)
    DIFF            reduce using rule 70 (primary_expression -> IDENT .)
    INF             reduce using rule 70 (primary_expression -> IDENT .)
    SUP             reduce using rule 70 (primary_expression -> IDENT .)
    INFEQUAL        reduce using rule 70 (primary_expression -> IDENT .)
    SUPEQUAL        reduce using rule 70 (primary_expression -> IDENT .)


state 65

    (44) jump_instruction -> RETURN expression . SEMI_COL
    (54) expression -> expression . SHIFTLEFT expression_additive
    (55) expression -> expression . SHIFTRIGHT expression_additive

    SEMI_COL        shift and go to state 90
    SHIFTLEFT       shift and go to state 84
    SHIFTRIGHT      shift and go to state 82


state 66

    (57) expression_additive -> expression_additive PLUS . expression_multiplicative
    (59) expression_multiplicative -> . unary_expression
    (60) expression_multiplicative -> . expression_multiplicative MULTI unary_expression
    (61) expression_multiplicative -> . expression_multiplicative DIV unary_expression
    (62) expression_multiplicative -> . expression_multiplicative MODULO unary_expression
    (63) unary_expression -> . postfix_expression
    (64) unary_expression -> . MINUS unary_expression
    (65) postfix_expression -> . primary_expression
    (66) postfix_expression -> . IDENT L_PARENTHESIS argument_expression_list R_PARENTHESIS
    (67) postfix_expression -> . IDENT L_PARENTHESIS R_PARENTHESIS
    (70) primary_expression -> . IDENT
    (71) primary_expression -> . CONST_INT
    (72) primary_expression -> . CONST_STRING
    (73) primary_expression -> . L_PARENTHESIS expression R_PARENTHESIS
    (74) primary_expression -> . CHAR

    MINUS           shift and go to state 38
    IDENT           shift and go to state 64
    CONST_INT       shift and go to state 37
    CONST_STRING    shift and go to state 29
    L_PARENTHESIS   shift and go to state 41
    CHAR            shift and go to state 35

    unary_expression               shift and go to state 31
    postfix_expression             shift and go to state 40
    primary_expression             shift and go to state 51
    expression_multiplicative      shift and go to state 91

state 67

    (58) expression_additive -> expression_additive MINUS . expression_multiplicative
    (59) expression_multiplicative -> . unary_expression
    (60) expression_multiplicative -> . expression_multiplicative MULTI unary_expression
    (61) expression_multiplicative -> . expression_multiplicative DIV unary_expression
    (62) expression_multiplicative -> . expression_multiplicative MODULO unary_expression
    (63) unary_expression -> . postfix_expression
    (64) unary_expression -> . MINUS unary_expression
    (65) postfix_expression -> . primary_expression
    (66) postfix_expression -> . IDENT L_PARENTHESIS argument_expression_list R_PARENTHESIS
    (67) postfix_expression -> . IDENT L_PARENTHESIS R_PARENTHESIS
    (70) primary_expression -> . IDENT
    (71) primary_expression -> . CONST_INT
    (72) primary_expression -> . CONST_STRING
    (73) primary_expression -> . L_PARENTHESIS expression R_PARENTHESIS
    (74) primary_expression -> . CHAR

    MINUS           shift and go to state 38
    IDENT           shift and go to state 64
    CONST_INT       shift and go to state 37
    CONST_STRING    shift and go to state 29
    L_PARENTHESIS   shift and go to state 41
    CHAR            shift and go to state 35

    unary_expression               shift and go to state 31
    postfix_expression             shift and go to state 40
    primary_expression             shift and go to state 51
    expression_multiplicative      shift and go to state 92

state 68

    (38) select_instruction -> cond_instruction instruction .
    (39) select_instruction -> cond_instruction instruction . ELSE instruction

    RIGHT_BRACKET   reduce using rule 38 (select_instruction -> cond_instruction instruction .)
    SEMI_COL        reduce using rule 38 (select_instruction -> cond_instruction instruction .)
    WHILE           reduce using rule 38 (select_instruction -> cond_instruction instruction .)
    DO              reduce using rule 38 (select_instruction -> cond_instruction instruction .)
    FOR             reduce using rule 38 (select_instruction -> cond_instruction instruction .)
    RETURN          reduce using rule 38 (select_instruction -> cond_instruction instruction .)
    LEFT_BRACKET    reduce using rule 38 (select_instruction -> cond_instruction instruction .)
    IDENT           reduce using rule 38 (select_instruction -> cond_instruction instruction .)
    IF              reduce using rule 38 (select_instruction -> cond_instruction instruction .)
    MINUS           reduce using rule 38 (select_instruction -> cond_instruction instruction .)
    CONST_INT       reduce using rule 38 (select_instruction -> cond_instruction instruction .)
    CONST_STRING    reduce using rule 38 (select_instruction -> cond_instruction instruction .)
    L_PARENTHESIS   reduce using rule 38 (select_instruction -> cond_instruction instruction .)
    CHAR            reduce using rule 38 (select_instruction -> cond_instruction instruction .)
    ELSE            shift and go to state 93

  ! ELSE            [ reduce using rule 38 (select_instruction -> cond_instruction instruction .) ]


state 69

    (41) iteration_instruction -> WHILE L_PARENTHESIS . condition R_PARENTHESIS instruction
    (45) condition -> . expression comparison_operator expression
    (46) condition -> . expression
    (53) expression -> . expression_additive
    (54) expression -> . expression SHIFTLEFT expression_additive
    (55) expression -> . expression SHIFTRIGHT expression_additive
    (56) expression_additive -> . expression_multiplicative
    (57) expression_additive -> . expression_additive PLUS expression_multiplicative
    (58) expression_additive -> . expression_additive MINUS expression_multiplicative
    (59) expression_multiplicative -> . unary_expression
    (60) expression_multiplicative -> . expression_multiplicative MULTI unary_expression
    (61) expression_multiplicative -> . expression_multiplicative DIV unary_expression
    (62) expression_multiplicative -> . expression_multiplicative MODULO unary_expression
    (63) unary_expression -> . postfix_expression
    (64) unary_expression -> . MINUS unary_expression
    (65) postfix_expression -> . primary_expression
    (66) postfix_expression -> . IDENT L_PARENTHESIS argument_expression_list R_PARENTHESIS
    (67) postfix_expression -> . IDENT L_PARENTHESIS R_PARENTHESIS
    (70) primary_expression -> . IDENT
    (71) primary_expression -> . CONST_INT
    (72) primary_expression -> . CONST_STRING
    (73) primary_expression -> . L_PARENTHESIS expression R_PARENTHESIS
    (74) primary_expression -> . CHAR

    MINUS           shift and go to state 38
    IDENT           shift and go to state 64
    CONST_INT       shift and go to state 37
    CONST_STRING    shift and go to state 29
    L_PARENTHESIS   shift and go to state 41
    CHAR            shift and go to state 35

    unary_expression               shift and go to state 31
    expression_additive            shift and go to state 32
    postfix_expression             shift and go to state 40
    condition                      shift and go to state 94
    expression                     shift and go to state 95
    expression_multiplicative      shift and go to state 58
    primary_expression             shift and go to state 51

state 70

    (64) unary_expression -> MINUS unary_expression .

    MULTI           reduce using rule 64 (unary_expression -> MINUS unary_expression .)
    DIV             reduce using rule 64 (unary_expression -> MINUS unary_expression .)
    MODULO          reduce using rule 64 (unary_expression -> MINUS unary_expression .)
    PLUS            reduce using rule 64 (unary_expression -> MINUS unary_expression .)
    MINUS           reduce using rule 64 (unary_expression -> MINUS unary_expression .)
    SEMI_COL        reduce using rule 64 (unary_expression -> MINUS unary_expression .)
    SHIFTLEFT       reduce using rule 64 (unary_expression -> MINUS unary_expression .)
    SHIFTRIGHT      reduce using rule 64 (unary_expression -> MINUS unary_expression .)
    R_PARENTHESIS   reduce using rule 64 (unary_expression -> MINUS unary_expression .)
    EGAL            reduce using rule 64 (unary_expression -> MINUS unary_expression .)
    DIFF            reduce using rule 64 (unary_expression -> MINUS unary_expression .)
    INF             reduce using rule 64 (unary_expression -> MINUS unary_expression .)
    SUP             reduce using rule 64 (unary_expression -> MINUS unary_expression .)
    INFEQUAL        reduce using rule 64 (unary_expression -> MINUS unary_expression .)
    SUPEQUAL        reduce using rule 64 (unary_expression -> MINUS unary_expression .)
    COMMA           reduce using rule 64 (unary_expression -> MINUS unary_expression .)


state 71

    (73) primary_expression -> L_PARENTHESIS expression . R_PARENTHESIS
    (54) expression -> expression . SHIFTLEFT expression_additive
    (55) expression -> expression . SHIFTRIGHT expression_additive

    R_PARENTHESIS   shift and go to state 96
    SHIFTLEFT       shift and go to state 84
    SHIFTRIGHT      shift and go to state 82


state 72

    (40) cond_instruction -> IF L_PARENTHESIS . condition R_PARENTHESIS
    (45) condition -> . expression comparison_operator expression
    (46) condition -> . expression
    (53) expression -> . expression_additive
    (54) expression -> . expression SHIFTLEFT expression_additive
    (55) expression -> . expression SHIFTRIGHT expression_additive
    (56) expression_additive -> . expression_multiplicative
    (57) expression_additive -> . expression_additive PLUS expression_multiplicative
    (58) expression_additive -> . expression_additive MINUS expression_multiplicative
    (59) expression_multiplicative -> . unary_expression
    (60) expression_multiplicative -> . expression_multiplicative MULTI unary_expression
    (61) expression_multiplicative -> . expression_multiplicative DIV unary_expression
    (62) expression_multiplicative -> . expression_multiplicative MODULO unary_expression
    (63) unary_expression -> . postfix_expression
    (64) unary_expression -> . MINUS unary_expression
    (65) postfix_expression -> . primary_expression
    (66) postfix_expression -> . IDENT L_PARENTHESIS argument_expression_list R_PARENTHESIS
    (67) postfix_expression -> . IDENT L_PARENTHESIS R_PARENTHESIS
    (70) primary_expression -> . IDENT
    (71) primary_expression -> . CONST_INT
    (72) primary_expression -> . CONST_STRING
    (73) primary_expression -> . L_PARENTHESIS expression R_PARENTHESIS
    (74) primary_expression -> . CHAR

    MINUS           shift and go to state 38
    IDENT           shift and go to state 64
    CONST_INT       shift and go to state 37
    CONST_STRING    shift and go to state 29
    L_PARENTHESIS   shift and go to state 41
    CHAR            shift and go to state 35

    unary_expression               shift and go to state 31
    expression_additive            shift and go to state 32
    postfix_expression             shift and go to state 40
    condition                      shift and go to state 97
    expression                     shift and go to state 95
    expression_multiplicative      shift and go to state 58
    primary_expression             shift and go to state 51

state 73

    (29) assignment -> IDENT ASSIGNMENT . expression
    (53) expression -> . expression_additive
    (54) expression -> . expression SHIFTLEFT expression_additive
    (55) expression -> . expression SHIFTRIGHT expression_additive
    (56) expression_additive -> . expression_multiplicative
    (57) expression_additive -> . expression_additive PLUS expression_multiplicative
    (58) expression_additive -> . expression_additive MINUS expression_multiplicative
    (59) expression_multiplicative -> . unary_expression
    (60) expression_multiplicative -> . expression_multiplicative MULTI unary_expression
    (61) expression_multiplicative -> . expression_multiplicative DIV unary_expression
    (62) expression_multiplicative -> . expression_multiplicative MODULO unary_expression
    (63) unary_expression -> . postfix_expression
    (64) unary_expression -> . MINUS unary_expression
    (65) postfix_expression -> . primary_expression
    (66) postfix_expression -> . IDENT L_PARENTHESIS argument_expression_list R_PARENTHESIS
    (67) postfix_expression -> . IDENT L_PARENTHESIS R_PARENTHESIS
    (70) primary_expression -> . IDENT
    (71) primary_expression -> . CONST_INT
    (72) primary_expression -> . CONST_STRING
    (73) primary_expression -> . L_PARENTHESIS expression R_PARENTHESIS
    (74) primary_expression -> . CHAR

    MINUS           shift and go to state 38
    IDENT           shift and go to state 64
    CONST_INT       shift and go to state 37
    CONST_STRING    shift and go to state 29
    L_PARENTHESIS   shift and go to state 41
    CHAR            shift and go to state 35

    unary_expression               shift and go to state 31
    expression_additive            shift and go to state 32
    postfix_expression             shift and go to state 40
    primary_expression             shift and go to state 51
    expression                     shift and go to state 98
    expression_multiplicative      shift and go to state 58

state 74

    (66) postfix_expression -> IDENT L_PARENTHESIS . argument_expression_list R_PARENTHESIS
    (67) postfix_expression -> IDENT L_PARENTHESIS . R_PARENTHESIS
    (68) argument_expression_list -> . expression
    (69) argument_expression_list -> . argument_expression_list COMMA expression
    (53) expression -> . expression_additive
    (54) expression -> . expression SHIFTLEFT expression_additive
    (55) expression -> . expression SHIFTRIGHT expression_additive
    (56) expression_additive -> . expression_multiplicative
    (57) expression_additive -> . expression_additive PLUS expression_multiplicative
    (58) expression_additive -> . expression_additive MINUS expression_multiplicative
    (59) expression_multiplicative -> . unary_expression
    (60) expression_multiplicative -> . expression_multiplicative MULTI unary_expression
    (61) expression_multiplicative -> . expression_multiplicative DIV unary_expression
    (62) expression_multiplicative -> . expression_multiplicative MODULO unary_expression
    (63) unary_expression -> . postfix_expression
    (64) unary_expression -> . MINUS unary_expression
    (65) postfix_expression -> . primary_expression
    (66) postfix_expression -> . IDENT L_PARENTHESIS argument_expression_list R_PARENTHESIS
    (67) postfix_expression -> . IDENT L_PARENTHESIS R_PARENTHESIS
    (70) primary_expression -> . IDENT
    (71) primary_expression -> . CONST_INT
    (72) primary_expression -> . CONST_STRING
    (73) primary_expression -> . L_PARENTHESIS expression R_PARENTHESIS
    (74) primary_expression -> . CHAR

    R_PARENTHESIS   shift and go to state 100
    MINUS           shift and go to state 38
    IDENT           shift and go to state 64
    CONST_INT       shift and go to state 37
    CONST_STRING    shift and go to state 29
    L_PARENTHESIS   shift and go to state 41
    CHAR            shift and go to state 35

    unary_expression               shift and go to state 31
    expression_additive            shift and go to state 32
    argument_expression_list       shift and go to state 99
    postfix_expression             shift and go to state 40
    primary_expression             shift and go to state 51
    expression                     shift and go to state 101
    expression_multiplicative      shift and go to state 58

state 75

    (43) iteration_instruction -> FOR L_PARENTHESIS . assignment SEMI_COL condition SEMI_COL assignment R_PARENTHESIS instruction
    (29) assignment -> . IDENT ASSIGNMENT expression

    IDENT           shift and go to state 102

    assignment                     shift and go to state 103

state 76

    (28) expression_instruction -> assignment SEMI_COL .

    WHILE           reduce using rule 28 (expression_instruction -> assignment SEMI_COL .)
    ELSE            reduce using rule 28 (expression_instruction -> assignment SEMI_COL .)
    RIGHT_BRACKET   reduce using rule 28 (expression_instruction -> assignment SEMI_COL .)
    SEMI_COL        reduce using rule 28 (expression_instruction -> assignment SEMI_COL .)
    DO              reduce using rule 28 (expression_instruction -> assignment SEMI_COL .)
    FOR             reduce using rule 28 (expression_instruction -> assignment SEMI_COL .)
    RETURN          reduce using rule 28 (expression_instruction -> assignment SEMI_COL .)
    LEFT_BRACKET    reduce using rule 28 (expression_instruction -> assignment SEMI_COL .)
    IDENT           reduce using rule 28 (expression_instruction -> assignment SEMI_COL .)
    IF              reduce using rule 28 (expression_instruction -> assignment SEMI_COL .)
    MINUS           reduce using rule 28 (expression_instruction -> assignment SEMI_COL .)
    CONST_INT       reduce using rule 28 (expression_instruction -> assignment SEMI_COL .)
    CONST_STRING    reduce using rule 28 (expression_instruction -> assignment SEMI_COL .)
    L_PARENTHESIS   reduce using rule 28 (expression_instruction -> assignment SEMI_COL .)
    CHAR            reduce using rule 28 (expression_instruction -> assignment SEMI_COL .)


state 77

    (32) compound_instruction -> block_start instruction_list block_end .

    RIGHT_BRACKET   reduce using rule 32 (compound_instruction -> block_start instruction_list block_end .)
    SEMI_COL        reduce using rule 32 (compound_instruction -> block_start instruction_list block_end .)
    WHILE           reduce using rule 32 (compound_instruction -> block_start instruction_list block_end .)
    DO              reduce using rule 32 (compound_instruction -> block_start instruction_list block_end .)
    FOR             reduce using rule 32 (compound_instruction -> block_start instruction_list block_end .)
    RETURN          reduce using rule 32 (compound_instruction -> block_start instruction_list block_end .)
    LEFT_BRACKET    reduce using rule 32 (compound_instruction -> block_start instruction_list block_end .)
    IDENT           reduce using rule 32 (compound_instruction -> block_start instruction_list block_end .)
    IF              reduce using rule 32 (compound_instruction -> block_start instruction_list block_end .)
    MINUS           reduce using rule 32 (compound_instruction -> block_start instruction_list block_end .)
    CONST_INT       reduce using rule 32 (compound_instruction -> block_start instruction_list block_end .)
    CONST_STRING    reduce using rule 32 (compound_instruction -> block_start instruction_list block_end .)
    L_PARENTHESIS   reduce using rule 32 (compound_instruction -> block_start instruction_list block_end .)
    CHAR            reduce using rule 32 (compound_instruction -> block_start instruction_list block_end .)
    ELSE            reduce using rule 32 (compound_instruction -> block_start instruction_list block_end .)
    EXTERN          reduce using rule 32 (compound_instruction -> block_start instruction_list block_end .)
    INT             reduce using rule 32 (compound_instruction -> block_start instruction_list block_end .)
    STRING          reduce using rule 32 (compound_instruction -> block_start instruction_list block_end .)
    $end            reduce using rule 32 (compound_instruction -> block_start instruction_list block_end .)


state 78

    (37) instruction_list -> instruction_list instruction .

    RIGHT_BRACKET   reduce using rule 37 (instruction_list -> instruction_list instruction .)
    SEMI_COL        reduce using rule 37 (instruction_list -> instruction_list instruction .)
    WHILE           reduce using rule 37 (instruction_list -> instruction_list instruction .)
    DO              reduce using rule 37 (instruction_list -> instruction_list instruction .)
    FOR             reduce using rule 37 (instruction_list -> instruction_list instruction .)
    RETURN          reduce using rule 37 (instruction_list -> instruction_list instruction .)
    LEFT_BRACKET    reduce using rule 37 (instruction_list -> instruction_list instruction .)
    IDENT           reduce using rule 37 (instruction_list -> instruction_list instruction .)
    IF              reduce using rule 37 (instruction_list -> instruction_list instruction .)
    MINUS           reduce using rule 37 (instruction_list -> instruction_list instruction .)
    CONST_INT       reduce using rule 37 (instruction_list -> instruction_list instruction .)
    CONST_STRING    reduce using rule 37 (instruction_list -> instruction_list instruction .)
    L_PARENTHESIS   reduce using rule 37 (instruction_list -> instruction_list instruction .)
    CHAR            reduce using rule 37 (instruction_list -> instruction_list instruction .)


state 79

    (31) compound_instruction -> block_start declaration_list block_end .

    RIGHT_BRACKET   reduce using rule 31 (compound_instruction -> block_start declaration_list block_end .)
    SEMI_COL        reduce using rule 31 (compound_instruction -> block_start declaration_list block_end .)
    WHILE           reduce using rule 31 (compound_instruction -> block_start declaration_list block_end .)
    DO              reduce using rule 31 (compound_instruction -> block_start declaration_list block_end .)
    FOR             reduce using rule 31 (compound_instruction -> block_start declaration_list block_end .)
    RETURN          reduce using rule 31 (compound_instruction -> block_start declaration_list block_end .)
    LEFT_BRACKET    reduce using rule 31 (compound_instruction -> block_start declaration_list block_end .)
    IDENT           reduce using rule 31 (compound_instruction -> block_start declaration_list block_end .)
    IF              reduce using rule 31 (compound_instruction -> block_start declaration_list block_end .)
    MINUS           reduce using rule 31 (compound_instruction -> block_start declaration_list block_end .)
    CONST_INT       reduce using rule 31 (compound_instruction -> block_start declaration_list block_end .)
    CONST_STRING    reduce using rule 31 (compound_instruction -> block_start declaration_list block_end .)
    L_PARENTHESIS   reduce using rule 31 (compound_instruction -> block_start declaration_list block_end .)
    CHAR            reduce using rule 31 (compound_instruction -> block_start declaration_list block_end .)
    ELSE            reduce using rule 31 (compound_instruction -> block_start declaration_list block_end .)
    EXTERN          reduce using rule 31 (compound_instruction -> block_start declaration_list block_end .)
    INT             reduce using rule 31 (compound_instruction -> block_start declaration_list block_end .)
    STRING          reduce using rule 31 (compound_instruction -> block_start declaration_list block_end .)
    $end            reduce using rule 31 (compound_instruction -> block_start declaration_list block_end .)


state 80

    (30) compound_instruction -> block_start declaration_list instruction_list . block_end
    (37) instruction_list -> instruction_list . instruction
    (35) block_end -> . RIGHT_BRACKET
    (21) instruction -> . SEMI_COL
    (22) instruction -> . compound_instruction
    (23) instruction -> . expression_instruction
    (24) instruction -> . iteration_instruction
    (25) instruction -> . select_instruction
    (26) instruction -> . jump_instruction
    (30) compound_instruction -> . block_start declaration_list instruction_list block_end
    (31) compound_instruction -> . block_start declaration_list block_end
    (32) compound_instruction -> . block_start instruction_list block_end
    (33) compound_instruction -> . block_start block_end
    (27) expression_instruction -> . expression SEMI_COL
    (28) expression_instruction -> . assignment SEMI_COL
    (41) iteration_instruction -> . WHILE L_PARENTHESIS condition R_PARENTHESIS instruction
    (42) iteration_instruction -> . DO instruction WHILE L_PARENTHESIS condition R_PARENTHESIS SEMI_COL
    (43) iteration_instruction -> . FOR L_PARENTHESIS assignment SEMI_COL condition SEMI_COL assignment R_PARENTHESIS instruction
    (38) select_instruction -> . cond_instruction instruction
    (39) select_instruction -> . cond_instruction instruction ELSE instruction
    (44) jump_instruction -> . RETURN expression SEMI_COL
    (34) block_start -> . LEFT_BRACKET
    (53) expression -> . expression_additive
    (54) expression -> . expression SHIFTLEFT expression_additive
    (55) expression -> . expression SHIFTRIGHT expression_additive
    (29) assignment -> . IDENT ASSIGNMENT expression
    (40) cond_instruction -> . IF L_PARENTHESIS condition R_PARENTHESIS
    (56) expression_additive -> . expression_multiplicative
    (57) expression_additive -> . expression_additive PLUS expression_multiplicative
    (58) expression_additive -> . expression_additive MINUS expression_multiplicative
    (59) expression_multiplicative -> . unary_expression
    (60) expression_multiplicative -> . expression_multiplicative MULTI unary_expression
    (61) expression_multiplicative -> . expression_multiplicative DIV unary_expression
    (62) expression_multiplicative -> . expression_multiplicative MODULO unary_expression
    (63) unary_expression -> . postfix_expression
    (64) unary_expression -> . MINUS unary_expression
    (65) postfix_expression -> . primary_expression
    (66) postfix_expression -> . IDENT L_PARENTHESIS argument_expression_list R_PARENTHESIS
    (67) postfix_expression -> . IDENT L_PARENTHESIS R_PARENTHESIS
    (70) primary_expression -> . IDENT
    (71) primary_expression -> . CONST_INT
    (72) primary_expression -> . CONST_STRING
    (73) primary_expression -> . L_PARENTHESIS expression R_PARENTHESIS
    (74) primary_expression -> . CHAR

    RIGHT_BRACKET   shift and go to state 34
    SEMI_COL        shift and go to state 39
    WHILE           shift and go to state 36
    DO              shift and go to state 28
    FOR             shift and go to state 48
    RETURN          shift and go to state 30
    LEFT_BRACKET    shift and go to state 21
    IDENT           shift and go to state 45
    IF              shift and go to state 43
    MINUS           shift and go to state 38
    CONST_INT       shift and go to state 37
    CONST_STRING    shift and go to state 29
    L_PARENTHESIS   shift and go to state 41
    CHAR            shift and go to state 35

    expression_instruction         shift and go to state 44
    block_end                      shift and go to state 104
    iteration_instruction          shift and go to state 47
    unary_expression               shift and go to state 31
    assignment                     shift and go to state 49
    compound_instruction           shift and go to state 53
    instruction                    shift and go to state 78
    block_start                    shift and go to state 20
    postfix_expression             shift and go to state 40
    cond_instruction               shift and go to state 33
    expression_multiplicative      shift and go to state 58
    select_instruction             shift and go to state 56
    jump_instruction               shift and go to state 42
    expression                     shift and go to state 57
    expression_additive            shift and go to state 32
    primary_expression             shift and go to state 51

state 81

    (13) declaration_list -> declaration_list declaration .

    RIGHT_BRACKET   reduce using rule 13 (declaration_list -> declaration_list declaration .)
    SEMI_COL        reduce using rule 13 (declaration_list -> declaration_list declaration .)
    INT             reduce using rule 13 (declaration_list -> declaration_list declaration .)
    STRING          reduce using rule 13 (declaration_list -> declaration_list declaration .)
    WHILE           reduce using rule 13 (declaration_list -> declaration_list declaration .)
    DO              reduce using rule 13 (declaration_list -> declaration_list declaration .)
    FOR             reduce using rule 13 (declaration_list -> declaration_list declaration .)
    RETURN          reduce using rule 13 (declaration_list -> declaration_list declaration .)
    LEFT_BRACKET    reduce using rule 13 (declaration_list -> declaration_list declaration .)
    IDENT           reduce using rule 13 (declaration_list -> declaration_list declaration .)
    IF              reduce using rule 13 (declaration_list -> declaration_list declaration .)
    MINUS           reduce using rule 13 (declaration_list -> declaration_list declaration .)
    CONST_INT       reduce using rule 13 (declaration_list -> declaration_list declaration .)
    CONST_STRING    reduce using rule 13 (declaration_list -> declaration_list declaration .)
    L_PARENTHESIS   reduce using rule 13 (declaration_list -> declaration_list declaration .)
    CHAR            reduce using rule 13 (declaration_list -> declaration_list declaration .)


state 82

    (55) expression -> expression SHIFTRIGHT . expression_additive
    (56) expression_additive -> . expression_multiplicative
    (57) expression_additive -> . expression_additive PLUS expression_multiplicative
    (58) expression_additive -> . expression_additive MINUS expression_multiplicative
    (59) expression_multiplicative -> . unary_expression
    (60) expression_multiplicative -> . expression_multiplicative MULTI unary_expression
    (61) expression_multiplicative -> . expression_multiplicative DIV unary_expression
    (62) expression_multiplicative -> . expression_multiplicative MODULO unary_expression
    (63) unary_expression -> . postfix_expression
    (64) unary_expression -> . MINUS unary_expression
    (65) postfix_expression -> . primary_expression
    (66) postfix_expression -> . IDENT L_PARENTHESIS argument_expression_list R_PARENTHESIS
    (67) postfix_expression -> . IDENT L_PARENTHESIS R_PARENTHESIS
    (70) primary_expression -> . IDENT
    (71) primary_expression -> . CONST_INT
    (72) primary_expression -> . CONST_STRING
    (73) primary_expression -> . L_PARENTHESIS expression R_PARENTHESIS
    (74) primary_expression -> . CHAR

    MINUS           shift and go to state 38
    IDENT           shift and go to state 64
    CONST_INT       shift and go to state 37
    CONST_STRING    shift and go to state 29
    L_PARENTHESIS   shift and go to state 41
    CHAR            shift and go to state 35

    unary_expression               shift and go to state 31
    expression_additive            shift and go to state 105
    postfix_expression             shift and go to state 40
    primary_expression             shift and go to state 51
    expression_multiplicative      shift and go to state 58

state 83

    (27) expression_instruction -> expression SEMI_COL .

    WHILE           reduce using rule 27 (expression_instruction -> expression SEMI_COL .)
    ELSE            reduce using rule 27 (expression_instruction -> expression SEMI_COL .)
    RIGHT_BRACKET   reduce using rule 27 (expression_instruction -> expression SEMI_COL .)
    SEMI_COL        reduce using rule 27 (expression_instruction -> expression SEMI_COL .)
    DO              reduce using rule 27 (expression_instruction -> expression SEMI_COL .)
    FOR             reduce using rule 27 (expression_instruction -> expression SEMI_COL .)
    RETURN          reduce using rule 27 (expression_instruction -> expression SEMI_COL .)
    LEFT_BRACKET    reduce using rule 27 (expression_instruction -> expression SEMI_COL .)
    IDENT           reduce using rule 27 (expression_instruction -> expression SEMI_COL .)
    IF              reduce using rule 27 (expression_instruction -> expression SEMI_COL .)
    MINUS           reduce using rule 27 (expression_instruction -> expression SEMI_COL .)
    CONST_INT       reduce using rule 27 (expression_instruction -> expression SEMI_COL .)
    CONST_STRING    reduce using rule 27 (expression_instruction -> expression SEMI_COL .)
    L_PARENTHESIS   reduce using rule 27 (expression_instruction -> expression SEMI_COL .)
    CHAR            reduce using rule 27 (expression_instruction -> expression SEMI_COL .)


state 84

    (54) expression -> expression SHIFTLEFT . expression_additive
    (56) expression_additive -> . expression_multiplicative
    (57) expression_additive -> . expression_additive PLUS expression_multiplicative
    (58) expression_additive -> . expression_additive MINUS expression_multiplicative
    (59) expression_multiplicative -> . unary_expression
    (60) expression_multiplicative -> . expression_multiplicative MULTI unary_expression
    (61) expression_multiplicative -> . expression_multiplicative DIV unary_expression
    (62) expression_multiplicative -> . expression_multiplicative MODULO unary_expression
    (63) unary_expression -> . postfix_expression
    (64) unary_expression -> . MINUS unary_expression
    (65) postfix_expression -> . primary_expression
    (66) postfix_expression -> . IDENT L_PARENTHESIS argument_expression_list R_PARENTHESIS
    (67) postfix_expression -> . IDENT L_PARENTHESIS R_PARENTHESIS
    (70) primary_expression -> . IDENT
    (71) primary_expression -> . CONST_INT
    (72) primary_expression -> . CONST_STRING
    (73) primary_expression -> . L_PARENTHESIS expression R_PARENTHESIS
    (74) primary_expression -> . CHAR

    MINUS           shift and go to state 38
    IDENT           shift and go to state 64
    CONST_INT       shift and go to state 37
    CONST_STRING    shift and go to state 29
    L_PARENTHESIS   shift and go to state 41
    CHAR            shift and go to state 35

    unary_expression               shift and go to state 31
    expression_additive            shift and go to state 106
    postfix_expression             shift and go to state 40
    primary_expression             shift and go to state 51
    expression_multiplicative      shift and go to state 58

state 85

    (61) expression_multiplicative -> expression_multiplicative DIV . unary_expression
    (63) unary_expression -> . postfix_expression
    (64) unary_expression -> . MINUS unary_expression
    (65) postfix_expression -> . primary_expression
    (66) postfix_expression -> . IDENT L_PARENTHESIS argument_expression_list R_PARENTHESIS
    (67) postfix_expression -> . IDENT L_PARENTHESIS R_PARENTHESIS
    (70) primary_expression -> . IDENT
    (71) primary_expression -> . CONST_INT
    (72) primary_expression -> . CONST_STRING
    (73) primary_expression -> . L_PARENTHESIS expression R_PARENTHESIS
    (74) primary_expression -> . CHAR

    MINUS           shift and go to state 38
    IDENT           shift and go to state 64
    CONST_INT       shift and go to state 37
    CONST_STRING    shift and go to state 29
    L_PARENTHESIS   shift and go to state 41
    CHAR            shift and go to state 35

    unary_expression               shift and go to state 107
    postfix_expression             shift and go to state 40
    primary_expression             shift and go to state 51

state 86

    (60) expression_multiplicative -> expression_multiplicative MULTI . unary_expression
    (63) unary_expression -> . postfix_expression
    (64) unary_expression -> . MINUS unary_expression
    (65) postfix_expression -> . primary_expression
    (66) postfix_expression -> . IDENT L_PARENTHESIS argument_expression_list R_PARENTHESIS
    (67) postfix_expression -> . IDENT L_PARENTHESIS R_PARENTHESIS
    (70) primary_expression -> . IDENT
    (71) primary_expression -> . CONST_INT
    (72) primary_expression -> . CONST_STRING
    (73) primary_expression -> . L_PARENTHESIS expression R_PARENTHESIS
    (74) primary_expression -> . CHAR

    MINUS           shift and go to state 38
    IDENT           shift and go to state 64
    CONST_INT       shift and go to state 37
    CONST_STRING    shift and go to state 29
    L_PARENTHESIS   shift and go to state 41
    CHAR            shift and go to state 35

    unary_expression               shift and go to state 108
    postfix_expression             shift and go to state 40
    primary_expression             shift and go to state 51

state 87

    (62) expression_multiplicative -> expression_multiplicative MODULO . unary_expression
    (63) unary_expression -> . postfix_expression
    (64) unary_expression -> . MINUS unary_expression
    (65) postfix_expression -> . primary_expression
    (66) postfix_expression -> . IDENT L_PARENTHESIS argument_expression_list R_PARENTHESIS
    (67) postfix_expression -> . IDENT L_PARENTHESIS R_PARENTHESIS
    (70) primary_expression -> . IDENT
    (71) primary_expression -> . CONST_INT
    (72) primary_expression -> . CONST_STRING
    (73) primary_expression -> . L_PARENTHESIS expression R_PARENTHESIS
    (74) primary_expression -> . CHAR

    MINUS           shift and go to state 38
    IDENT           shift and go to state 64
    CONST_INT       shift and go to state 37
    CONST_STRING    shift and go to state 29
    L_PARENTHESIS   shift and go to state 41
    CHAR            shift and go to state 35

    unary_expression               shift and go to state 109
    postfix_expression             shift and go to state 40
    primary_expression             shift and go to state 51

state 88

    (19) parameter_list -> parameter_list COMMA parameter_declaration .

    R_PARENTHESIS   reduce using rule 19 (parameter_list -> parameter_list COMMA parameter_declaration .)
    COMMA           reduce using rule 19 (parameter_list -> parameter_list COMMA parameter_declaration .)


state 89

    (42) iteration_instruction -> DO instruction WHILE . L_PARENTHESIS condition R_PARENTHESIS SEMI_COL

    L_PARENTHESIS   shift and go to state 110


state 90

    (44) jump_instruction -> RETURN expression SEMI_COL .

    RIGHT_BRACKET   reduce using rule 44 (jump_instruction -> RETURN expression SEMI_COL .)
    SEMI_COL        reduce using rule 44 (jump_instruction -> RETURN expression SEMI_COL .)
    WHILE           reduce using rule 44 (jump_instruction -> RETURN expression SEMI_COL .)
    DO              reduce using rule 44 (jump_instruction -> RETURN expression SEMI_COL .)
    FOR             reduce using rule 44 (jump_instruction -> RETURN expression SEMI_COL .)
    RETURN          reduce using rule 44 (jump_instruction -> RETURN expression SEMI_COL .)
    LEFT_BRACKET    reduce using rule 44 (jump_instruction -> RETURN expression SEMI_COL .)
    IDENT           reduce using rule 44 (jump_instruction -> RETURN expression SEMI_COL .)
    IF              reduce using rule 44 (jump_instruction -> RETURN expression SEMI_COL .)
    MINUS           reduce using rule 44 (jump_instruction -> RETURN expression SEMI_COL .)
    CONST_INT       reduce using rule 44 (jump_instruction -> RETURN expression SEMI_COL .)
    CONST_STRING    reduce using rule 44 (jump_instruction -> RETURN expression SEMI_COL .)
    L_PARENTHESIS   reduce using rule 44 (jump_instruction -> RETURN expression SEMI_COL .)
    CHAR            reduce using rule 44 (jump_instruction -> RETURN expression SEMI_COL .)
    ELSE            reduce using rule 44 (jump_instruction -> RETURN expression SEMI_COL .)


state 91

    (57) expression_additive -> expression_additive PLUS expression_multiplicative .
    (60) expression_multiplicative -> expression_multiplicative . MULTI unary_expression
    (61) expression_multiplicative -> expression_multiplicative . DIV unary_expression
    (62) expression_multiplicative -> expression_multiplicative . MODULO unary_expression

    PLUS            reduce using rule 57 (expression_additive -> expression_additive PLUS expression_multiplicative .)
    MINUS           reduce using rule 57 (expression_additive -> expression_additive PLUS expression_multiplicative .)
    SEMI_COL        reduce using rule 57 (expression_additive -> expression_additive PLUS expression_multiplicative .)
    SHIFTLEFT       reduce using rule 57 (expression_additive -> expression_additive PLUS expression_multiplicative .)
    SHIFTRIGHT      reduce using rule 57 (expression_additive -> expression_additive PLUS expression_multiplicative .)
    R_PARENTHESIS   reduce using rule 57 (expression_additive -> expression_additive PLUS expression_multiplicative .)
    EGAL            reduce using rule 57 (expression_additive -> expression_additive PLUS expression_multiplicative .)
    DIFF            reduce using rule 57 (expression_additive -> expression_additive PLUS expression_multiplicative .)
    INF             reduce using rule 57 (expression_additive -> expression_additive PLUS expression_multiplicative .)
    SUP             reduce using rule 57 (expression_additive -> expression_additive PLUS expression_multiplicative .)
    INFEQUAL        reduce using rule 57 (expression_additive -> expression_additive PLUS expression_multiplicative .)
    SUPEQUAL        reduce using rule 57 (expression_additive -> expression_additive PLUS expression_multiplicative .)
    COMMA           reduce using rule 57 (expression_additive -> expression_additive PLUS expression_multiplicative .)
    MULTI           shift and go to state 86
    DIV             shift and go to state 85
    MODULO          shift and go to state 87


state 92

    (58) expression_additive -> expression_additive MINUS expression_multiplicative .
    (60) expression_multiplicative -> expression_multiplicative . MULTI unary_expression
    (61) expression_multiplicative -> expression_multiplicative . DIV unary_expression
    (62) expression_multiplicative -> expression_multiplicative . MODULO unary_expression

    PLUS            reduce using rule 58 (expression_additive -> expression_additive MINUS expression_multiplicative .)
    MINUS           reduce using rule 58 (expression_additive -> expression_additive MINUS expression_multiplicative .)
    SEMI_COL        reduce using rule 58 (expression_additive -> expression_additive MINUS expression_multiplicative .)
    SHIFTLEFT       reduce using rule 58 (expression_additive -> expression_additive MINUS expression_multiplicative .)
    SHIFTRIGHT      reduce using rule 58 (expression_additive -> expression_additive MINUS expression_multiplicative .)
    R_PARENTHESIS   reduce using rule 58 (expression_additive -> expression_additive MINUS expression_multiplicative .)
    EGAL            reduce using rule 58 (expression_additive -> expression_additive MINUS expression_multiplicative .)
    DIFF            reduce using rule 58 (expression_additive -> expression_additive MINUS expression_multiplicative .)
    INF             reduce using rule 58 (expression_additive -> expression_additive MINUS expression_multiplicative .)
    SUP             reduce using rule 58 (expression_additive -> expression_additive MINUS expression_multiplicative .)
    INFEQUAL        reduce using rule 58 (expression_additive -> expression_additive MINUS expression_multiplicative .)
    SUPEQUAL        reduce using rule 58 (expression_additive -> expression_additive MINUS expression_multiplicative .)
    COMMA           reduce using rule 58 (expression_additive -> expression_additive MINUS expression_multiplicative .)
    MULTI           shift and go to state 86
    DIV             shift and go to state 85
    MODULO          shift and go to state 87


state 93

    (39) select_instruction -> cond_instruction instruction ELSE . instruction
    (21) instruction -> . SEMI_COL
    (22) instruction -> . compound_instruction
    (23) instruction -> . expression_instruction
    (24) instruction -> . iteration_instruction
    (25) instruction -> . select_instruction
    (26) instruction -> . jump_instruction
    (30) compound_instruction -> . block_start declaration_list instruction_list block_end
    (31) compound_instruction -> . block_start declaration_list block_end
    (32) compound_instruction -> . block_start instruction_list block_end
    (33) compound_instruction -> . block_start block_end
    (27) expression_instruction -> . expression SEMI_COL
    (28) expression_instruction -> . assignment SEMI_COL
    (41) iteration_instruction -> . WHILE L_PARENTHESIS condition R_PARENTHESIS instruction
    (42) iteration_instruction -> . DO instruction WHILE L_PARENTHESIS condition R_PARENTHESIS SEMI_COL
    (43) iteration_instruction -> . FOR L_PARENTHESIS assignment SEMI_COL condition SEMI_COL assignment R_PARENTHESIS instruction
    (38) select_instruction -> . cond_instruction instruction
    (39) select_instruction -> . cond_instruction instruction ELSE instruction
    (44) jump_instruction -> . RETURN expression SEMI_COL
    (34) block_start -> . LEFT_BRACKET
    (53) expression -> . expression_additive
    (54) expression -> . expression SHIFTLEFT expression_additive
    (55) expression -> . expression SHIFTRIGHT expression_additive
    (29) assignment -> . IDENT ASSIGNMENT expression
    (40) cond_instruction -> . IF L_PARENTHESIS condition R_PARENTHESIS
    (56) expression_additive -> . expression_multiplicative
    (57) expression_additive -> . expression_additive PLUS expression_multiplicative
    (58) expression_additive -> . expression_additive MINUS expression_multiplicative
    (59) expression_multiplicative -> . unary_expression
    (60) expression_multiplicative -> . expression_multiplicative MULTI unary_expression
    (61) expression_multiplicative -> . expression_multiplicative DIV unary_expression
    (62) expression_multiplicative -> . expression_multiplicative MODULO unary_expression
    (63) unary_expression -> . postfix_expression
    (64) unary_expression -> . MINUS unary_expression
    (65) postfix_expression -> . primary_expression
    (66) postfix_expression -> . IDENT L_PARENTHESIS argument_expression_list R_PARENTHESIS
    (67) postfix_expression -> . IDENT L_PARENTHESIS R_PARENTHESIS
    (70) primary_expression -> . IDENT
    (71) primary_expression -> . CONST_INT
    (72) primary_expression -> . CONST_STRING
    (73) primary_expression -> . L_PARENTHESIS expression R_PARENTHESIS
    (74) primary_expression -> . CHAR

    SEMI_COL        shift and go to state 39
    WHILE           shift and go to state 36
    DO              shift and go to state 28
    FOR             shift and go to state 48
    RETURN          shift and go to state 30
    LEFT_BRACKET    shift and go to state 21
    IDENT           shift and go to state 45
    IF              shift and go to state 43
    MINUS           shift and go to state 38
    CONST_INT       shift and go to state 37
    CONST_STRING    shift and go to state 29
    L_PARENTHESIS   shift and go to state 41
    CHAR            shift and go to state 35

    expression_instruction         shift and go to state 44
    iteration_instruction          shift and go to state 47
    unary_expression               shift and go to state 31
    assignment                     shift and go to state 49
    compound_instruction           shift and go to state 53
    instruction                    shift and go to state 111
    cond_instruction               shift and go to state 33
    postfix_expression             shift and go to state 40
    block_start                    shift and go to state 20
    expression_multiplicative      shift and go to state 58
    select_instruction             shift and go to state 56
    jump_instruction               shift and go to state 42
    expression                     shift and go to state 57
    expression_additive            shift and go to state 32
    primary_expression             shift and go to state 51

state 94

    (41) iteration_instruction -> WHILE L_PARENTHESIS condition . R_PARENTHESIS instruction

    R_PARENTHESIS   shift and go to state 112


state 95

    (45) condition -> expression . comparison_operator expression
    (46) condition -> expression .
    (54) expression -> expression . SHIFTLEFT expression_additive
    (55) expression -> expression . SHIFTRIGHT expression_additive
    (47) comparison_operator -> . EGAL
    (48) comparison_operator -> . DIFF
    (49) comparison_operator -> . INF
    (50) comparison_operator -> . SUP
    (51) comparison_operator -> . INFEQUAL
    (52) comparison_operator -> . SUPEQUAL

    SEMI_COL        reduce using rule 46 (condition -> expression .)
    R_PARENTHESIS   reduce using rule 46 (condition -> expression .)
    SHIFTLEFT       shift and go to state 84
    SHIFTRIGHT      shift and go to state 82
    EGAL            shift and go to state 113
    DIFF            shift and go to state 117
    INF             shift and go to state 118
    SUP             shift and go to state 116
    INFEQUAL        shift and go to state 114
    SUPEQUAL        shift and go to state 115

    comparison_operator            shift and go to state 119

state 96

    (73) primary_expression -> L_PARENTHESIS expression R_PARENTHESIS .

    MULTI           reduce using rule 73 (primary_expression -> L_PARENTHESIS expression R_PARENTHESIS .)
    DIV             reduce using rule 73 (primary_expression -> L_PARENTHESIS expression R_PARENTHESIS .)
    MODULO          reduce using rule 73 (primary_expression -> L_PARENTHESIS expression R_PARENTHESIS .)
    PLUS            reduce using rule 73 (primary_expression -> L_PARENTHESIS expression R_PARENTHESIS .)
    MINUS           reduce using rule 73 (primary_expression -> L_PARENTHESIS expression R_PARENTHESIS .)
    SHIFTLEFT       reduce using rule 73 (primary_expression -> L_PARENTHESIS expression R_PARENTHESIS .)
    SHIFTRIGHT      reduce using rule 73 (primary_expression -> L_PARENTHESIS expression R_PARENTHESIS .)
    R_PARENTHESIS   reduce using rule 73 (primary_expression -> L_PARENTHESIS expression R_PARENTHESIS .)
    COMMA           reduce using rule 73 (primary_expression -> L_PARENTHESIS expression R_PARENTHESIS .)
    SEMI_COL        reduce using rule 73 (primary_expression -> L_PARENTHESIS expression R_PARENTHESIS .)
    EGAL            reduce using rule 73 (primary_expression -> L_PARENTHESIS expression R_PARENTHESIS .)
    DIFF            reduce using rule 73 (primary_expression -> L_PARENTHESIS expression R_PARENTHESIS .)
    INF             reduce using rule 73 (primary_expression -> L_PARENTHESIS expression R_PARENTHESIS .)
    SUP             reduce using rule 73 (primary_expression -> L_PARENTHESIS expression R_PARENTHESIS .)
    INFEQUAL        reduce using rule 73 (primary_expression -> L_PARENTHESIS expression R_PARENTHESIS .)
    SUPEQUAL        reduce using rule 73 (primary_expression -> L_PARENTHESIS expression R_PARENTHESIS .)


state 97

    (40) cond_instruction -> IF L_PARENTHESIS condition . R_PARENTHESIS

    R_PARENTHESIS   shift and go to state 120


state 98

    (29) assignment -> IDENT ASSIGNMENT expression .
    (54) expression -> expression . SHIFTLEFT expression_additive
    (55) expression -> expression . SHIFTRIGHT expression_additive

    SEMI_COL        reduce using rule 29 (assignment -> IDENT ASSIGNMENT expression .)
    R_PARENTHESIS   reduce using rule 29 (assignment -> IDENT ASSIGNMENT expression .)
    SHIFTLEFT       shift and go to state 84
    SHIFTRIGHT      shift and go to state 82


state 99

    (66) postfix_expression -> IDENT L_PARENTHESIS argument_expression_list . R_PARENTHESIS
    (69) argument_expression_list -> argument_expression_list . COMMA expression

    R_PARENTHESIS   shift and go to state 121
    COMMA           shift and go to state 122


state 100

    (67) postfix_expression -> IDENT L_PARENTHESIS R_PARENTHESIS .

    MULTI           reduce using rule 67 (postfix_expression -> IDENT L_PARENTHESIS R_PARENTHESIS .)
    DIV             reduce using rule 67 (postfix_expression -> IDENT L_PARENTHESIS R_PARENTHESIS .)
    MODULO          reduce using rule 67 (postfix_expression -> IDENT L_PARENTHESIS R_PARENTHESIS .)
    PLUS            reduce using rule 67 (postfix_expression -> IDENT L_PARENTHESIS R_PARENTHESIS .)
    MINUS           reduce using rule 67 (postfix_expression -> IDENT L_PARENTHESIS R_PARENTHESIS .)
    SHIFTLEFT       reduce using rule 67 (postfix_expression -> IDENT L_PARENTHESIS R_PARENTHESIS .)
    SHIFTRIGHT      reduce using rule 67 (postfix_expression -> IDENT L_PARENTHESIS R_PARENTHESIS .)
    EGAL            reduce using rule 67 (postfix_expression -> IDENT L_PARENTHESIS R_PARENTHESIS .)
    DIFF            reduce using rule 67 (postfix_expression -> IDENT L_PARENTHESIS R_PARENTHESIS .)
    INF             reduce using rule 67 (postfix_expression -> IDENT L_PARENTHESIS R_PARENTHESIS .)
    SUP             reduce using rule 67 (postfix_expression -> IDENT L_PARENTHESIS R_PARENTHESIS .)
    INFEQUAL        reduce using rule 67 (postfix_expression -> IDENT L_PARENTHESIS R_PARENTHESIS .)
    SUPEQUAL        reduce using rule 67 (postfix_expression -> IDENT L_PARENTHESIS R_PARENTHESIS .)
    R_PARENTHESIS   reduce using rule 67 (postfix_expression -> IDENT L_PARENTHESIS R_PARENTHESIS .)
    SEMI_COL        reduce using rule 67 (postfix_expression -> IDENT L_PARENTHESIS R_PARENTHESIS .)
    COMMA           reduce using rule 67 (postfix_expression -> IDENT L_PARENTHESIS R_PARENTHESIS .)


state 101

    (68) argument_expression_list -> expression .
    (54) expression -> expression . SHIFTLEFT expression_additive
    (55) expression -> expression . SHIFTRIGHT expression_additive

    R_PARENTHESIS   reduce using rule 68 (argument_expression_list -> expression .)
    COMMA           reduce using rule 68 (argument_expression_list -> expression .)
    SHIFTLEFT       shift and go to state 84
    SHIFTRIGHT      shift and go to state 82


state 102

    (29) assignment -> IDENT . ASSIGNMENT expression

    ASSIGNMENT      shift and go to state 73


state 103

    (43) iteration_instruction -> FOR L_PARENTHESIS assignment . SEMI_COL condition SEMI_COL assignment R_PARENTHESIS instruction

    SEMI_COL        shift and go to state 123


state 104

    (30) compound_instruction -> block_start declaration_list instruction_list block_end .

    RIGHT_BRACKET   reduce using rule 30 (compound_instruction -> block_start declaration_list instruction_list block_end .)
    SEMI_COL        reduce using rule 30 (compound_instruction -> block_start declaration_list instruction_list block_end .)
    WHILE           reduce using rule 30 (compound_instruction -> block_start declaration_list instruction_list block_end .)
    DO              reduce using rule 30 (compound_instruction -> block_start declaration_list instruction_list block_end .)
    FOR             reduce using rule 30 (compound_instruction -> block_start declaration_list instruction_list block_end .)
    RETURN          reduce using rule 30 (compound_instruction -> block_start declaration_list instruction_list block_end .)
    LEFT_BRACKET    reduce using rule 30 (compound_instruction -> block_start declaration_list instruction_list block_end .)
    IDENT           reduce using rule 30 (compound_instruction -> block_start declaration_list instruction_list block_end .)
    IF              reduce using rule 30 (compound_instruction -> block_start declaration_list instruction_list block_end .)
    MINUS           reduce using rule 30 (compound_instruction -> block_start declaration_list instruction_list block_end .)
    CONST_INT       reduce using rule 30 (compound_instruction -> block_start declaration_list instruction_list block_end .)
    CONST_STRING    reduce using rule 30 (compound_instruction -> block_start declaration_list instruction_list block_end .)
    L_PARENTHESIS   reduce using rule 30 (compound_instruction -> block_start declaration_list instruction_list block_end .)
    CHAR            reduce using rule 30 (compound_instruction -> block_start declaration_list instruction_list block_end .)
    ELSE            reduce using rule 30 (compound_instruction -> block_start declaration_list instruction_list block_end .)
    EXTERN          reduce using rule 30 (compound_instruction -> block_start declaration_list instruction_list block_end .)
    INT             reduce using rule 30 (compound_instruction -> block_start declaration_list instruction_list block_end .)
    STRING          reduce using rule 30 (compound_instruction -> block_start declaration_list instruction_list block_end .)
    $end            reduce using rule 30 (compound_instruction -> block_start declaration_list instruction_list block_end .)


state 105

    (55) expression -> expression SHIFTRIGHT expression_additive .
    (57) expression_additive -> expression_additive . PLUS expression_multiplicative
    (58) expression_additive -> expression_additive . MINUS expression_multiplicative

    SHIFTLEFT       reduce using rule 55 (expression -> expression SHIFTRIGHT expression_additive .)
    SHIFTRIGHT      reduce using rule 55 (expression -> expression SHIFTRIGHT expression_additive .)
    EGAL            reduce using rule 55 (expression -> expression SHIFTRIGHT expression_additive .)
    DIFF            reduce using rule 55 (expression -> expression SHIFTRIGHT expression_additive .)
    INF             reduce using rule 55 (expression -> expression SHIFTRIGHT expression_additive .)
    SUP             reduce using rule 55 (expression -> expression SHIFTRIGHT expression_additive .)
    INFEQUAL        reduce using rule 55 (expression -> expression SHIFTRIGHT expression_additive .)
    SUPEQUAL        reduce using rule 55 (expression -> expression SHIFTRIGHT expression_additive .)
    R_PARENTHESIS   reduce using rule 55 (expression -> expression SHIFTRIGHT expression_additive .)
    SEMI_COL        reduce using rule 55 (expression -> expression SHIFTRIGHT expression_additive .)
    COMMA           reduce using rule 55 (expression -> expression SHIFTRIGHT expression_additive .)
    PLUS            shift and go to state 66
    MINUS           shift and go to state 67


state 106

    (54) expression -> expression SHIFTLEFT expression_additive .
    (57) expression_additive -> expression_additive . PLUS expression_multiplicative
    (58) expression_additive -> expression_additive . MINUS expression_multiplicative

    SHIFTLEFT       reduce using rule 54 (expression -> expression SHIFTLEFT expression_additive .)
    SHIFTRIGHT      reduce using rule 54 (expression -> expression SHIFTLEFT expression_additive .)
    EGAL            reduce using rule 54 (expression -> expression SHIFTLEFT expression_additive .)
    DIFF            reduce using rule 54 (expression -> expression SHIFTLEFT expression_additive .)
    INF             reduce using rule 54 (expression -> expression SHIFTLEFT expression_additive .)
    SUP             reduce using rule 54 (expression -> expression SHIFTLEFT expression_additive .)
    INFEQUAL        reduce using rule 54 (expression -> expression SHIFTLEFT expression_additive .)
    SUPEQUAL        reduce using rule 54 (expression -> expression SHIFTLEFT expression_additive .)
    R_PARENTHESIS   reduce using rule 54 (expression -> expression SHIFTLEFT expression_additive .)
    SEMI_COL        reduce using rule 54 (expression -> expression SHIFTLEFT expression_additive .)
    COMMA           reduce using rule 54 (expression -> expression SHIFTLEFT expression_additive .)
    PLUS            shift and go to state 66
    MINUS           shift and go to state 67


state 107

    (61) expression_multiplicative -> expression_multiplicative DIV unary_expression .

    MULTI           reduce using rule 61 (expression_multiplicative -> expression_multiplicative DIV unary_expression .)
    DIV             reduce using rule 61 (expression_multiplicative -> expression_multiplicative DIV unary_expression .)
    MODULO          reduce using rule 61 (expression_multiplicative -> expression_multiplicative DIV unary_expression .)
    PLUS            reduce using rule 61 (expression_multiplicative -> expression_multiplicative DIV unary_expression .)
    MINUS           reduce using rule 61 (expression_multiplicative -> expression_multiplicative DIV unary_expression .)
    SEMI_COL        reduce using rule 61 (expression_multiplicative -> expression_multiplicative DIV unary_expression .)
    SHIFTLEFT       reduce using rule 61 (expression_multiplicative -> expression_multiplicative DIV unary_expression .)
    SHIFTRIGHT      reduce using rule 61 (expression_multiplicative -> expression_multiplicative DIV unary_expression .)
    R_PARENTHESIS   reduce using rule 61 (expression_multiplicative -> expression_multiplicative DIV unary_expression .)
    COMMA           reduce using rule 61 (expression_multiplicative -> expression_multiplicative DIV unary_expression .)
    EGAL            reduce using rule 61 (expression_multiplicative -> expression_multiplicative DIV unary_expression .)
    DIFF            reduce using rule 61 (expression_multiplicative -> expression_multiplicative DIV unary_expression .)
    INF             reduce using rule 61 (expression_multiplicative -> expression_multiplicative DIV unary_expression .)
    SUP             reduce using rule 61 (expression_multiplicative -> expression_multiplicative DIV unary_expression .)
    INFEQUAL        reduce using rule 61 (expression_multiplicative -> expression_multiplicative DIV unary_expression .)
    SUPEQUAL        reduce using rule 61 (expression_multiplicative -> expression_multiplicative DIV unary_expression .)


state 108

    (60) expression_multiplicative -> expression_multiplicative MULTI unary_expression .

    MULTI           reduce using rule 60 (expression_multiplicative -> expression_multiplicative MULTI unary_expression .)
    DIV             reduce using rule 60 (expression_multiplicative -> expression_multiplicative MULTI unary_expression .)
    MODULO          reduce using rule 60 (expression_multiplicative -> expression_multiplicative MULTI unary_expression .)
    PLUS            reduce using rule 60 (expression_multiplicative -> expression_multiplicative MULTI unary_expression .)
    MINUS           reduce using rule 60 (expression_multiplicative -> expression_multiplicative MULTI unary_expression .)
    SEMI_COL        reduce using rule 60 (expression_multiplicative -> expression_multiplicative MULTI unary_expression .)
    SHIFTLEFT       reduce using rule 60 (expression_multiplicative -> expression_multiplicative MULTI unary_expression .)
    SHIFTRIGHT      reduce using rule 60 (expression_multiplicative -> expression_multiplicative MULTI unary_expression .)
    R_PARENTHESIS   reduce using rule 60 (expression_multiplicative -> expression_multiplicative MULTI unary_expression .)
    COMMA           reduce using rule 60 (expression_multiplicative -> expression_multiplicative MULTI unary_expression .)
    EGAL            reduce using rule 60 (expression_multiplicative -> expression_multiplicative MULTI unary_expression .)
    DIFF            reduce using rule 60 (expression_multiplicative -> expression_multiplicative MULTI unary_expression .)
    INF             reduce using rule 60 (expression_multiplicative -> expression_multiplicative MULTI unary_expression .)
    SUP             reduce using rule 60 (expression_multiplicative -> expression_multiplicative MULTI unary_expression .)
    INFEQUAL        reduce using rule 60 (expression_multiplicative -> expression_multiplicative MULTI unary_expression .)
    SUPEQUAL        reduce using rule 60 (expression_multiplicative -> expression_multiplicative MULTI unary_expression .)


state 109

    (62) expression_multiplicative -> expression_multiplicative MODULO unary_expression .

    MULTI           reduce using rule 62 (expression_multiplicative -> expression_multiplicative MODULO unary_expression .)
    DIV             reduce using rule 62 (expression_multiplicative -> expression_multiplicative MODULO unary_expression .)
    MODULO          reduce using rule 62 (expression_multiplicative -> expression_multiplicative MODULO unary_expression .)
    PLUS            reduce using rule 62 (expression_multiplicative -> expression_multiplicative MODULO unary_expression .)
    MINUS           reduce using rule 62 (expression_multiplicative -> expression_multiplicative MODULO unary_expression .)
    SEMI_COL        reduce using rule 62 (expression_multiplicative -> expression_multiplicative MODULO unary_expression .)
    SHIFTLEFT       reduce using rule 62 (expression_multiplicative -> expression_multiplicative MODULO unary_expression .)
    SHIFTRIGHT      reduce using rule 62 (expression_multiplicative -> expression_multiplicative MODULO unary_expression .)
    R_PARENTHESIS   reduce using rule 62 (expression_multiplicative -> expression_multiplicative MODULO unary_expression .)
    COMMA           reduce using rule 62 (expression_multiplicative -> expression_multiplicative MODULO unary_expression .)
    EGAL            reduce using rule 62 (expression_multiplicative -> expression_multiplicative MODULO unary_expression .)
    DIFF            reduce using rule 62 (expression_multiplicative -> expression_multiplicative MODULO unary_expression .)
    INF             reduce using rule 62 (expression_multiplicative -> expression_multiplicative MODULO unary_expression .)
    SUP             reduce using rule 62 (expression_multiplicative -> expression_multiplicative MODULO unary_expression .)
    INFEQUAL        reduce using rule 62 (expression_multiplicative -> expression_multiplicative MODULO unary_expression .)
    SUPEQUAL        reduce using rule 62 (expression_multiplicative -> expression_multiplicative MODULO unary_expression .)


state 110

    (42) iteration_instruction -> DO instruction WHILE L_PARENTHESIS . condition R_PARENTHESIS SEMI_COL
    (45) condition -> . expression comparison_operator expression
    (46) condition -> . expression
    (53) expression -> . expression_additive
    (54) expression -> . expression SHIFTLEFT expression_additive
    (55) expression -> . expression SHIFTRIGHT expression_additive
    (56) expression_additive -> . expression_multiplicative
    (57) expression_additive -> . expression_additive PLUS expression_multiplicative
    (58) expression_additive -> . expression_additive MINUS expression_multiplicative
    (59) expression_multiplicative -> . unary_expression
    (60) expression_multiplicative -> . expression_multiplicative MULTI unary_expression
    (61) expression_multiplicative -> . expression_multiplicative DIV unary_expression
    (62) expression_multiplicative -> . expression_multiplicative MODULO unary_expression
    (63) unary_expression -> . postfix_expression
    (64) unary_expression -> . MINUS unary_expression
    (65) postfix_expression -> . primary_expression
    (66) postfix_expression -> . IDENT L_PARENTHESIS argument_expression_list R_PARENTHESIS
    (67) postfix_expression -> . IDENT L_PARENTHESIS R_PARENTHESIS
    (70) primary_expression -> . IDENT
    (71) primary_expression -> . CONST_INT
    (72) primary_expression -> . CONST_STRING
    (73) primary_expression -> . L_PARENTHESIS expression R_PARENTHESIS
    (74) primary_expression -> . CHAR

    MINUS           shift and go to state 38
    IDENT           shift and go to state 64
    CONST_INT       shift and go to state 37
    CONST_STRING    shift and go to state 29
    L_PARENTHESIS   shift and go to state 41
    CHAR            shift and go to state 35

    unary_expression               shift and go to state 31
    expression_additive            shift and go to state 32
    postfix_expression             shift and go to state 40
    condition                      shift and go to state 124
    expression                     shift and go to state 95
    expression_multiplicative      shift and go to state 58
    primary_expression             shift and go to state 51

state 111

    (39) select_instruction -> cond_instruction instruction ELSE instruction .

    ELSE            reduce using rule 39 (select_instruction -> cond_instruction instruction ELSE instruction .)
    RIGHT_BRACKET   reduce using rule 39 (select_instruction -> cond_instruction instruction ELSE instruction .)
    SEMI_COL        reduce using rule 39 (select_instruction -> cond_instruction instruction ELSE instruction .)
    WHILE           reduce using rule 39 (select_instruction -> cond_instruction instruction ELSE instruction .)
    DO              reduce using rule 39 (select_instruction -> cond_instruction instruction ELSE instruction .)
    FOR             reduce using rule 39 (select_instruction -> cond_instruction instruction ELSE instruction .)
    RETURN          reduce using rule 39 (select_instruction -> cond_instruction instruction ELSE instruction .)
    LEFT_BRACKET    reduce using rule 39 (select_instruction -> cond_instruction instruction ELSE instruction .)
    IDENT           reduce using rule 39 (select_instruction -> cond_instruction instruction ELSE instruction .)
    IF              reduce using rule 39 (select_instruction -> cond_instruction instruction ELSE instruction .)
    MINUS           reduce using rule 39 (select_instruction -> cond_instruction instruction ELSE instruction .)
    CONST_INT       reduce using rule 39 (select_instruction -> cond_instruction instruction ELSE instruction .)
    CONST_STRING    reduce using rule 39 (select_instruction -> cond_instruction instruction ELSE instruction .)
    L_PARENTHESIS   reduce using rule 39 (select_instruction -> cond_instruction instruction ELSE instruction .)
    CHAR            reduce using rule 39 (select_instruction -> cond_instruction instruction ELSE instruction .)


state 112

    (41) iteration_instruction -> WHILE L_PARENTHESIS condition R_PARENTHESIS . instruction
    (21) instruction -> . SEMI_COL
    (22) instruction -> . compound_instruction
    (23) instruction -> . expression_instruction
    (24) instruction -> . iteration_instruction
    (25) instruction -> . select_instruction
    (26) instruction -> . jump_instruction
    (30) compound_instruction -> . block_start declaration_list instruction_list block_end
    (31) compound_instruction -> . block_start declaration_list block_end
    (32) compound_instruction -> . block_start instruction_list block_end
    (33) compound_instruction -> . block_start block_end
    (27) expression_instruction -> . expression SEMI_COL
    (28) expression_instruction -> . assignment SEMI_COL
    (41) iteration_instruction -> . WHILE L_PARENTHESIS condition R_PARENTHESIS instruction
    (42) iteration_instruction -> . DO instruction WHILE L_PARENTHESIS condition R_PARENTHESIS SEMI_COL
    (43) iteration_instruction -> . FOR L_PARENTHESIS assignment SEMI_COL condition SEMI_COL assignment R_PARENTHESIS instruction
    (38) select_instruction -> . cond_instruction instruction
    (39) select_instruction -> . cond_instruction instruction ELSE instruction
    (44) jump_instruction -> . RETURN expression SEMI_COL
    (34) block_start -> . LEFT_BRACKET
    (53) expression -> . expression_additive
    (54) expression -> . expression SHIFTLEFT expression_additive
    (55) expression -> . expression SHIFTRIGHT expression_additive
    (29) assignment -> . IDENT ASSIGNMENT expression
    (40) cond_instruction -> . IF L_PARENTHESIS condition R_PARENTHESIS
    (56) expression_additive -> . expression_multiplicative
    (57) expression_additive -> . expression_additive PLUS expression_multiplicative
    (58) expression_additive -> . expression_additive MINUS expression_multiplicative
    (59) expression_multiplicative -> . unary_expression
    (60) expression_multiplicative -> . expression_multiplicative MULTI unary_expression
    (61) expression_multiplicative -> . expression_multiplicative DIV unary_expression
    (62) expression_multiplicative -> . expression_multiplicative MODULO unary_expression
    (63) unary_expression -> . postfix_expression
    (64) unary_expression -> . MINUS unary_expression
    (65) postfix_expression -> . primary_expression
    (66) postfix_expression -> . IDENT L_PARENTHESIS argument_expression_list R_PARENTHESIS
    (67) postfix_expression -> . IDENT L_PARENTHESIS R_PARENTHESIS
    (70) primary_expression -> . IDENT
    (71) primary_expression -> . CONST_INT
    (72) primary_expression -> . CONST_STRING
    (73) primary_expression -> . L_PARENTHESIS expression R_PARENTHESIS
    (74) primary_expression -> . CHAR

    SEMI_COL        shift and go to state 39
    WHILE           shift and go to state 36
    DO              shift and go to state 28
    FOR             shift and go to state 48
    RETURN          shift and go to state 30
    LEFT_BRACKET    shift and go to state 21
    IDENT           shift and go to state 45
    IF              shift and go to state 43
    MINUS           shift and go to state 38
    CONST_INT       shift and go to state 37
    CONST_STRING    shift and go to state 29
    L_PARENTHESIS   shift and go to state 41
    CHAR            shift and go to state 35

    expression_instruction         shift and go to state 44
    iteration_instruction          shift and go to state 47
    unary_expression               shift and go to state 31
    assignment                     shift and go to state 49
    compound_instruction           shift and go to state 53
    instruction                    shift and go to state 125
    block_start                    shift and go to state 20
    postfix_expression             shift and go to state 40
    cond_instruction               shift and go to state 33
    expression_multiplicative      shift and go to state 58
    select_instruction             shift and go to state 56
    jump_instruction               shift and go to state 42
    expression                     shift and go to state 57
    expression_additive            shift and go to state 32
    primary_expression             shift and go to state 51

state 113

    (47) comparison_operator -> EGAL .

    MINUS           reduce using rule 47 (comparison_operator -> EGAL .)
    IDENT           reduce using rule 47 (comparison_operator -> EGAL .)
    CONST_INT       reduce using rule 47 (comparison_operator -> EGAL .)
    CONST_STRING    reduce using rule 47 (comparison_operator -> EGAL .)
    L_PARENTHESIS   reduce using rule 47 (comparison_operator -> EGAL .)
    CHAR            reduce using rule 47 (comparison_operator -> EGAL .)


state 114

    (51) comparison_operator -> INFEQUAL .

    MINUS           reduce using rule 51 (comparison_operator -> INFEQUAL .)
    IDENT           reduce using rule 51 (comparison_operator -> INFEQUAL .)
    CONST_INT       reduce using rule 51 (comparison_operator -> INFEQUAL .)
    CONST_STRING    reduce using rule 51 (comparison_operator -> INFEQUAL .)
    L_PARENTHESIS   reduce using rule 51 (comparison_operator -> INFEQUAL .)
    CHAR            reduce using rule 51 (comparison_operator -> INFEQUAL .)


state 115

    (52) comparison_operator -> SUPEQUAL .

    MINUS           reduce using rule 52 (comparison_operator -> SUPEQUAL .)
    IDENT           reduce using rule 52 (comparison_operator -> SUPEQUAL .)
    CONST_INT       reduce using rule 52 (comparison_operator -> SUPEQUAL .)
    CONST_STRING    reduce using rule 52 (comparison_operator -> SUPEQUAL .)
    L_PARENTHESIS   reduce using rule 52 (comparison_operator -> SUPEQUAL .)
    CHAR            reduce using rule 52 (comparison_operator -> SUPEQUAL .)


state 116

    (50) comparison_operator -> SUP .

    MINUS           reduce using rule 50 (comparison_operator -> SUP .)
    IDENT           reduce using rule 50 (comparison_operator -> SUP .)
    CONST_INT       reduce using rule 50 (comparison_operator -> SUP .)
    CONST_STRING    reduce using rule 50 (comparison_operator -> SUP .)
    L_PARENTHESIS   reduce using rule 50 (comparison_operator -> SUP .)
    CHAR            reduce using rule 50 (comparison_operator -> SUP .)


state 117

    (48) comparison_operator -> DIFF .

    MINUS           reduce using rule 48 (comparison_operator -> DIFF .)
    IDENT           reduce using rule 48 (comparison_operator -> DIFF .)
    CONST_INT       reduce using rule 48 (comparison_operator -> DIFF .)
    CONST_STRING    reduce using rule 48 (comparison_operator -> DIFF .)
    L_PARENTHESIS   reduce using rule 48 (comparison_operator -> DIFF .)
    CHAR            reduce using rule 48 (comparison_operator -> DIFF .)


state 118

    (49) comparison_operator -> INF .

    MINUS           reduce using rule 49 (comparison_operator -> INF .)
    IDENT           reduce using rule 49 (comparison_operator -> INF .)
    CONST_INT       reduce using rule 49 (comparison_operator -> INF .)
    CONST_STRING    reduce using rule 49 (comparison_operator -> INF .)
    L_PARENTHESIS   reduce using rule 49 (comparison_operator -> INF .)
    CHAR            reduce using rule 49 (comparison_operator -> INF .)


state 119

    (45) condition -> expression comparison_operator . expression
    (53) expression -> . expression_additive
    (54) expression -> . expression SHIFTLEFT expression_additive
    (55) expression -> . expression SHIFTRIGHT expression_additive
    (56) expression_additive -> . expression_multiplicative
    (57) expression_additive -> . expression_additive PLUS expression_multiplicative
    (58) expression_additive -> . expression_additive MINUS expression_multiplicative
    (59) expression_multiplicative -> . unary_expression
    (60) expression_multiplicative -> . expression_multiplicative MULTI unary_expression
    (61) expression_multiplicative -> . expression_multiplicative DIV unary_expression
    (62) expression_multiplicative -> . expression_multiplicative MODULO unary_expression
    (63) unary_expression -> . postfix_expression
    (64) unary_expression -> . MINUS unary_expression
    (65) postfix_expression -> . primary_expression
    (66) postfix_expression -> . IDENT L_PARENTHESIS argument_expression_list R_PARENTHESIS
    (67) postfix_expression -> . IDENT L_PARENTHESIS R_PARENTHESIS
    (70) primary_expression -> . IDENT
    (71) primary_expression -> . CONST_INT
    (72) primary_expression -> . CONST_STRING
    (73) primary_expression -> . L_PARENTHESIS expression R_PARENTHESIS
    (74) primary_expression -> . CHAR

    MINUS           shift and go to state 38
    IDENT           shift and go to state 64
    CONST_INT       shift and go to state 37
    CONST_STRING    shift and go to state 29
    L_PARENTHESIS   shift and go to state 41
    CHAR            shift and go to state 35

    unary_expression               shift and go to state 31
    expression_additive            shift and go to state 32
    postfix_expression             shift and go to state 40
    primary_expression             shift and go to state 51
    expression                     shift and go to state 126
    expression_multiplicative      shift and go to state 58

state 120

    (40) cond_instruction -> IF L_PARENTHESIS condition R_PARENTHESIS .

    SEMI_COL        reduce using rule 40 (cond_instruction -> IF L_PARENTHESIS condition R_PARENTHESIS .)
    WHILE           reduce using rule 40 (cond_instruction -> IF L_PARENTHESIS condition R_PARENTHESIS .)
    DO              reduce using rule 40 (cond_instruction -> IF L_PARENTHESIS condition R_PARENTHESIS .)
    FOR             reduce using rule 40 (cond_instruction -> IF L_PARENTHESIS condition R_PARENTHESIS .)
    RETURN          reduce using rule 40 (cond_instruction -> IF L_PARENTHESIS condition R_PARENTHESIS .)
    LEFT_BRACKET    reduce using rule 40 (cond_instruction -> IF L_PARENTHESIS condition R_PARENTHESIS .)
    IDENT           reduce using rule 40 (cond_instruction -> IF L_PARENTHESIS condition R_PARENTHESIS .)
    IF              reduce using rule 40 (cond_instruction -> IF L_PARENTHESIS condition R_PARENTHESIS .)
    MINUS           reduce using rule 40 (cond_instruction -> IF L_PARENTHESIS condition R_PARENTHESIS .)
    CONST_INT       reduce using rule 40 (cond_instruction -> IF L_PARENTHESIS condition R_PARENTHESIS .)
    CONST_STRING    reduce using rule 40 (cond_instruction -> IF L_PARENTHESIS condition R_PARENTHESIS .)
    L_PARENTHESIS   reduce using rule 40 (cond_instruction -> IF L_PARENTHESIS condition R_PARENTHESIS .)
    CHAR            reduce using rule 40 (cond_instruction -> IF L_PARENTHESIS condition R_PARENTHESIS .)


state 121

    (66) postfix_expression -> IDENT L_PARENTHESIS argument_expression_list R_PARENTHESIS .

    MULTI           reduce using rule 66 (postfix_expression -> IDENT L_PARENTHESIS argument_expression_list R_PARENTHESIS .)
    DIV             reduce using rule 66 (postfix_expression -> IDENT L_PARENTHESIS argument_expression_list R_PARENTHESIS .)
    MODULO          reduce using rule 66 (postfix_expression -> IDENT L_PARENTHESIS argument_expression_list R_PARENTHESIS .)
    PLUS            reduce using rule 66 (postfix_expression -> IDENT L_PARENTHESIS argument_expression_list R_PARENTHESIS .)
    MINUS           reduce using rule 66 (postfix_expression -> IDENT L_PARENTHESIS argument_expression_list R_PARENTHESIS .)
    SHIFTLEFT       reduce using rule 66 (postfix_expression -> IDENT L_PARENTHESIS argument_expression_list R_PARENTHESIS .)
    SHIFTRIGHT      reduce using rule 66 (postfix_expression -> IDENT L_PARENTHESIS argument_expression_list R_PARENTHESIS .)
    EGAL            reduce using rule 66 (postfix_expression -> IDENT L_PARENTHESIS argument_expression_list R_PARENTHESIS .)
    DIFF            reduce using rule 66 (postfix_expression -> IDENT L_PARENTHESIS argument_expression_list R_PARENTHESIS .)
    INF             reduce using rule 66 (postfix_expression -> IDENT L_PARENTHESIS argument_expression_list R_PARENTHESIS .)
    SUP             reduce using rule 66 (postfix_expression -> IDENT L_PARENTHESIS argument_expression_list R_PARENTHESIS .)
    INFEQUAL        reduce using rule 66 (postfix_expression -> IDENT L_PARENTHESIS argument_expression_list R_PARENTHESIS .)
    SUPEQUAL        reduce using rule 66 (postfix_expression -> IDENT L_PARENTHESIS argument_expression_list R_PARENTHESIS .)
    R_PARENTHESIS   reduce using rule 66 (postfix_expression -> IDENT L_PARENTHESIS argument_expression_list R_PARENTHESIS .)
    SEMI_COL        reduce using rule 66 (postfix_expression -> IDENT L_PARENTHESIS argument_expression_list R_PARENTHESIS .)
    COMMA           reduce using rule 66 (postfix_expression -> IDENT L_PARENTHESIS argument_expression_list R_PARENTHESIS .)


state 122

    (69) argument_expression_list -> argument_expression_list COMMA . expression
    (53) expression -> . expression_additive
    (54) expression -> . expression SHIFTLEFT expression_additive
    (55) expression -> . expression SHIFTRIGHT expression_additive
    (56) expression_additive -> . expression_multiplicative
    (57) expression_additive -> . expression_additive PLUS expression_multiplicative
    (58) expression_additive -> . expression_additive MINUS expression_multiplicative
    (59) expression_multiplicative -> . unary_expression
    (60) expression_multiplicative -> . expression_multiplicative MULTI unary_expression
    (61) expression_multiplicative -> . expression_multiplicative DIV unary_expression
    (62) expression_multiplicative -> . expression_multiplicative MODULO unary_expression
    (63) unary_expression -> . postfix_expression
    (64) unary_expression -> . MINUS unary_expression
    (65) postfix_expression -> . primary_expression
    (66) postfix_expression -> . IDENT L_PARENTHESIS argument_expression_list R_PARENTHESIS
    (67) postfix_expression -> . IDENT L_PARENTHESIS R_PARENTHESIS
    (70) primary_expression -> . IDENT
    (71) primary_expression -> . CONST_INT
    (72) primary_expression -> . CONST_STRING
    (73) primary_expression -> . L_PARENTHESIS expression R_PARENTHESIS
    (74) primary_expression -> . CHAR

    MINUS           shift and go to state 38
    IDENT           shift and go to state 64
    CONST_INT       shift and go to state 37
    CONST_STRING    shift and go to state 29
    L_PARENTHESIS   shift and go to state 41
    CHAR            shift and go to state 35

    unary_expression               shift and go to state 31
    expression_additive            shift and go to state 32
    postfix_expression             shift and go to state 40
    primary_expression             shift and go to state 51
    expression                     shift and go to state 127
    expression_multiplicative      shift and go to state 58

state 123

    (43) iteration_instruction -> FOR L_PARENTHESIS assignment SEMI_COL . condition SEMI_COL assignment R_PARENTHESIS instruction
    (45) condition -> . expression comparison_operator expression
    (46) condition -> . expression
    (53) expression -> . expression_additive
    (54) expression -> . expression SHIFTLEFT expression_additive
    (55) expression -> . expression SHIFTRIGHT expression_additive
    (56) expression_additive -> . expression_multiplicative
    (57) expression_additive -> . expression_additive PLUS expression_multiplicative
    (58) expression_additive -> . expression_additive MINUS expression_multiplicative
    (59) expression_multiplicative -> . unary_expression
    (60) expression_multiplicative -> . expression_multiplicative MULTI unary_expression
    (61) expression_multiplicative -> . expression_multiplicative DIV unary_expression
    (62) expression_multiplicative -> . expression_multiplicative MODULO unary_expression
    (63) unary_expression -> . postfix_expression
    (64) unary_expression -> . MINUS unary_expression
    (65) postfix_expression -> . primary_expression
    (66) postfix_expression -> . IDENT L_PARENTHESIS argument_expression_list R_PARENTHESIS
    (67) postfix_expression -> . IDENT L_PARENTHESIS R_PARENTHESIS
    (70) primary_expression -> . IDENT
    (71) primary_expression -> . CONST_INT
    (72) primary_expression -> . CONST_STRING
    (73) primary_expression -> . L_PARENTHESIS expression R_PARENTHESIS
    (74) primary_expression -> . CHAR

    MINUS           shift and go to state 38
    IDENT           shift and go to state 64
    CONST_INT       shift and go to state 37
    CONST_STRING    shift and go to state 29
    L_PARENTHESIS   shift and go to state 41
    CHAR            shift and go to state 35

    unary_expression               shift and go to state 31
    expression_additive            shift and go to state 32
    postfix_expression             shift and go to state 40
    expression_multiplicative      shift and go to state 58
    expression                     shift and go to state 95
    condition                      shift and go to state 128
    primary_expression             shift and go to state 51

state 124

    (42) iteration_instruction -> DO instruction WHILE L_PARENTHESIS condition . R_PARENTHESIS SEMI_COL

    R_PARENTHESIS   shift and go to state 129


state 125

    (41) iteration_instruction -> WHILE L_PARENTHESIS condition R_PARENTHESIS instruction .

    RIGHT_BRACKET   reduce using rule 41 (iteration_instruction -> WHILE L_PARENTHESIS condition R_PARENTHESIS instruction .)
    SEMI_COL        reduce using rule 41 (iteration_instruction -> WHILE L_PARENTHESIS condition R_PARENTHESIS instruction .)
    WHILE           reduce using rule 41 (iteration_instruction -> WHILE L_PARENTHESIS condition R_PARENTHESIS instruction .)
    DO              reduce using rule 41 (iteration_instruction -> WHILE L_PARENTHESIS condition R_PARENTHESIS instruction .)
    FOR             reduce using rule 41 (iteration_instruction -> WHILE L_PARENTHESIS condition R_PARENTHESIS instruction .)
    RETURN          reduce using rule 41 (iteration_instruction -> WHILE L_PARENTHESIS condition R_PARENTHESIS instruction .)
    LEFT_BRACKET    reduce using rule 41 (iteration_instruction -> WHILE L_PARENTHESIS condition R_PARENTHESIS instruction .)
    IDENT           reduce using rule 41 (iteration_instruction -> WHILE L_PARENTHESIS condition R_PARENTHESIS instruction .)
    IF              reduce using rule 41 (iteration_instruction -> WHILE L_PARENTHESIS condition R_PARENTHESIS instruction .)
    MINUS           reduce using rule 41 (iteration_instruction -> WHILE L_PARENTHESIS condition R_PARENTHESIS instruction .)
    CONST_INT       reduce using rule 41 (iteration_instruction -> WHILE L_PARENTHESIS condition R_PARENTHESIS instruction .)
    CONST_STRING    reduce using rule 41 (iteration_instruction -> WHILE L_PARENTHESIS condition R_PARENTHESIS instruction .)
    L_PARENTHESIS   reduce using rule 41 (iteration_instruction -> WHILE L_PARENTHESIS condition R_PARENTHESIS instruction .)
    CHAR            reduce using rule 41 (iteration_instruction -> WHILE L_PARENTHESIS condition R_PARENTHESIS instruction .)
    ELSE            reduce using rule 41 (iteration_instruction -> WHILE L_PARENTHESIS condition R_PARENTHESIS instruction .)


state 126

    (45) condition -> expression comparison_operator expression .
    (54) expression -> expression . SHIFTLEFT expression_additive
    (55) expression -> expression . SHIFTRIGHT expression_additive

    SEMI_COL        reduce using rule 45 (condition -> expression comparison_operator expression .)
    R_PARENTHESIS   reduce using rule 45 (condition -> expression comparison_operator expression .)
    SHIFTLEFT       shift and go to state 84
    SHIFTRIGHT      shift and go to state 82


state 127

    (69) argument_expression_list -> argument_expression_list COMMA expression .
    (54) expression -> expression . SHIFTLEFT expression_additive
    (55) expression -> expression . SHIFTRIGHT expression_additive

    R_PARENTHESIS   reduce using rule 69 (argument_expression_list -> argument_expression_list COMMA expression .)
    COMMA           reduce using rule 69 (argument_expression_list -> argument_expression_list COMMA expression .)
    SHIFTLEFT       shift and go to state 84
    SHIFTRIGHT      shift and go to state 82


state 128

    (43) iteration_instruction -> FOR L_PARENTHESIS assignment SEMI_COL condition . SEMI_COL assignment R_PARENTHESIS instruction

    SEMI_COL        shift and go to state 130


state 129

    (42) iteration_instruction -> DO instruction WHILE L_PARENTHESIS condition R_PARENTHESIS . SEMI_COL

    SEMI_COL        shift and go to state 131


state 130

    (43) iteration_instruction -> FOR L_PARENTHESIS assignment SEMI_COL condition SEMI_COL . assignment R_PARENTHESIS instruction
    (29) assignment -> . IDENT ASSIGNMENT expression

    IDENT           shift and go to state 102

    assignment                     shift and go to state 132

state 131

    (42) iteration_instruction -> DO instruction WHILE L_PARENTHESIS condition R_PARENTHESIS SEMI_COL .

    RIGHT_BRACKET   reduce using rule 42 (iteration_instruction -> DO instruction WHILE L_PARENTHESIS condition R_PARENTHESIS SEMI_COL .)
    SEMI_COL        reduce using rule 42 (iteration_instruction -> DO instruction WHILE L_PARENTHESIS condition R_PARENTHESIS SEMI_COL .)
    WHILE           reduce using rule 42 (iteration_instruction -> DO instruction WHILE L_PARENTHESIS condition R_PARENTHESIS SEMI_COL .)
    DO              reduce using rule 42 (iteration_instruction -> DO instruction WHILE L_PARENTHESIS condition R_PARENTHESIS SEMI_COL .)
    FOR             reduce using rule 42 (iteration_instruction -> DO instruction WHILE L_PARENTHESIS condition R_PARENTHESIS SEMI_COL .)
    RETURN          reduce using rule 42 (iteration_instruction -> DO instruction WHILE L_PARENTHESIS condition R_PARENTHESIS SEMI_COL .)
    LEFT_BRACKET    reduce using rule 42 (iteration_instruction -> DO instruction WHILE L_PARENTHESIS condition R_PARENTHESIS SEMI_COL .)
    IDENT           reduce using rule 42 (iteration_instruction -> DO instruction WHILE L_PARENTHESIS condition R_PARENTHESIS SEMI_COL .)
    IF              reduce using rule 42 (iteration_instruction -> DO instruction WHILE L_PARENTHESIS condition R_PARENTHESIS SEMI_COL .)
    MINUS           reduce using rule 42 (iteration_instruction -> DO instruction WHILE L_PARENTHESIS condition R_PARENTHESIS SEMI_COL .)
    CONST_INT       reduce using rule 42 (iteration_instruction -> DO instruction WHILE L_PARENTHESIS condition R_PARENTHESIS SEMI_COL .)
    CONST_STRING    reduce using rule 42 (iteration_instruction -> DO instruction WHILE L_PARENTHESIS condition R_PARENTHESIS SEMI_COL .)
    L_PARENTHESIS   reduce using rule 42 (iteration_instruction -> DO instruction WHILE L_PARENTHESIS condition R_PARENTHESIS SEMI_COL .)
    CHAR            reduce using rule 42 (iteration_instruction -> DO instruction WHILE L_PARENTHESIS condition R_PARENTHESIS SEMI_COL .)
    ELSE            reduce using rule 42 (iteration_instruction -> DO instruction WHILE L_PARENTHESIS condition R_PARENTHESIS SEMI_COL .)


state 132

    (43) iteration_instruction -> FOR L_PARENTHESIS assignment SEMI_COL condition SEMI_COL assignment . R_PARENTHESIS instruction

    R_PARENTHESIS   shift and go to state 133


state 133

    (43) iteration_instruction -> FOR L_PARENTHESIS assignment SEMI_COL condition SEMI_COL assignment R_PARENTHESIS . instruction
    (21) instruction -> . SEMI_COL
    (22) instruction -> . compound_instruction
    (23) instruction -> . expression_instruction
    (24) instruction -> . iteration_instruction
    (25) instruction -> . select_instruction
    (26) instruction -> . jump_instruction
    (30) compound_instruction -> . block_start declaration_list instruction_list block_end
    (31) compound_instruction -> . block_start declaration_list block_end
    (32) compound_instruction -> . block_start instruction_list block_end
    (33) compound_instruction -> . block_start block_end
    (27) expression_instruction -> . expression SEMI_COL
    (28) expression_instruction -> . assignment SEMI_COL
    (41) iteration_instruction -> . WHILE L_PARENTHESIS condition R_PARENTHESIS instruction
    (42) iteration_instruction -> . DO instruction WHILE L_PARENTHESIS condition R_PARENTHESIS SEMI_COL
    (43) iteration_instruction -> . FOR L_PARENTHESIS assignment SEMI_COL condition SEMI_COL assignment R_PARENTHESIS instruction
    (38) select_instruction -> . cond_instruction instruction
    (39) select_instruction -> . cond_instruction instruction ELSE instruction
    (44) jump_instruction -> . RETURN expression SEMI_COL
    (34) block_start -> . LEFT_BRACKET
    (53) expression -> . expression_additive
    (54) expression -> . expression SHIFTLEFT expression_additive
    (55) expression -> . expression SHIFTRIGHT expression_additive
    (29) assignment -> . IDENT ASSIGNMENT expression
    (40) cond_instruction -> . IF L_PARENTHESIS condition R_PARENTHESIS
    (56) expression_additive -> . expression_multiplicative
    (57) expression_additive -> . expression_additive PLUS expression_multiplicative
    (58) expression_additive -> . expression_additive MINUS expression_multiplicative
    (59) expression_multiplicative -> . unary_expression
    (60) expression_multiplicative -> . expression_multiplicative MULTI unary_expression
    (61) expression_multiplicative -> . expression_multiplicative DIV unary_expression
    (62) expression_multiplicative -> . expression_multiplicative MODULO unary_expression
    (63) unary_expression -> . postfix_expression
    (64) unary_expression -> . MINUS unary_expression
    (65) postfix_expression -> . primary_expression
    (66) postfix_expression -> . IDENT L_PARENTHESIS argument_expression_list R_PARENTHESIS
    (67) postfix_expression -> . IDENT L_PARENTHESIS R_PARENTHESIS
    (70) primary_expression -> . IDENT
    (71) primary_expression -> . CONST_INT
    (72) primary_expression -> . CONST_STRING
    (73) primary_expression -> . L_PARENTHESIS expression R_PARENTHESIS
    (74) primary_expression -> . CHAR

    SEMI_COL        shift and go to state 39
    WHILE           shift and go to state 36
    DO              shift and go to state 28
    FOR             shift and go to state 48
    RETURN          shift and go to state 30
    LEFT_BRACKET    shift and go to state 21
    IDENT           shift and go to state 45
    IF              shift and go to state 43
    MINUS           shift and go to state 38
    CONST_INT       shift and go to state 37
    CONST_STRING    shift and go to state 29
    L_PARENTHESIS   shift and go to state 41
    CHAR            shift and go to state 35

    expression_instruction         shift and go to state 44
    iteration_instruction          shift and go to state 47
    unary_expression               shift and go to state 31
    assignment                     shift and go to state 49
    compound_instruction           shift and go to state 53
    instruction                    shift and go to state 134
    block_start                    shift and go to state 20
    postfix_expression             shift and go to state 40
    cond_instruction               shift and go to state 33
    expression_multiplicative      shift and go to state 58
    select_instruction             shift and go to state 56
    jump_instruction               shift and go to state 42
    expression                     shift and go to state 57
    expression_additive            shift and go to state 32
    primary_expression             shift and go to state 51

state 134

    (43) iteration_instruction -> FOR L_PARENTHESIS assignment SEMI_COL condition SEMI_COL assignment R_PARENTHESIS instruction .

    RIGHT_BRACKET   reduce using rule 43 (iteration_instruction -> FOR L_PARENTHESIS assignment SEMI_COL condition SEMI_COL assignment R_PARENTHESIS instruction .)
    SEMI_COL        reduce using rule 43 (iteration_instruction -> FOR L_PARENTHESIS assignment SEMI_COL condition SEMI_COL assignment R_PARENTHESIS instruction .)
    WHILE           reduce using rule 43 (iteration_instruction -> FOR L_PARENTHESIS assignment SEMI_COL condition SEMI_COL assignment R_PARENTHESIS instruction .)
    DO              reduce using rule 43 (iteration_instruction -> FOR L_PARENTHESIS assignment SEMI_COL condition SEMI_COL assignment R_PARENTHESIS instruction .)
    FOR             reduce using rule 43 (iteration_instruction -> FOR L_PARENTHESIS assignment SEMI_COL condition SEMI_COL assignment R_PARENTHESIS instruction .)
    RETURN          reduce using rule 43 (iteration_instruction -> FOR L_PARENTHESIS assignment SEMI_COL condition SEMI_COL assignment R_PARENTHESIS instruction .)
    LEFT_BRACKET    reduce using rule 43 (iteration_instruction -> FOR L_PARENTHESIS assignment SEMI_COL condition SEMI_COL assignment R_PARENTHESIS instruction .)
    IDENT           reduce using rule 43 (iteration_instruction -> FOR L_PARENTHESIS assignment SEMI_COL condition SEMI_COL assignment R_PARENTHESIS instruction .)
    IF              reduce using rule 43 (iteration_instruction -> FOR L_PARENTHESIS assignment SEMI_COL condition SEMI_COL assignment R_PARENTHESIS instruction .)
    MINUS           reduce using rule 43 (iteration_instruction -> FOR L_PARENTHESIS assignment SEMI_COL condition SEMI_COL assignment R_PARENTHESIS instruction .)
    CONST_INT       reduce using rule 43 (iteration_instruction -> FOR L_PARENTHESIS assignment SEMI_COL condition SEMI_COL assignment R_PARENTHESIS instruction .)
    CONST_STRING    reduce using rule 43 (iteration_instruction -> FOR L_PARENTHESIS assignment SEMI_COL condition SEMI_COL assignment R_PARENTHESIS instruction .)
    L_PARENTHESIS   reduce using rule 43 (iteration_instruction -> FOR L_PARENTHESIS assignment SEMI_COL condition SEMI_COL assignment R_PARENTHESIS instruction .)
    CHAR            reduce using rule 43 (iteration_instruction -> FOR L_PARENTHESIS assignment SEMI_COL condition SEMI_COL assignment R_PARENTHESIS instruction .)
    ELSE            reduce using rule 43 (iteration_instruction -> FOR L_PARENTHESIS assignment SEMI_COL condition SEMI_COL assignment R_PARENTHESIS instruction .)

